{"posts":[{"title":"DevExtreme","text":"监听事件值变化出发onValueChanged: canEvent @value-changed=&quot;canEvent&quot; list对齐方式 alignment=&quot;left&quot; 对齐方式","link":"/2020/08/06/DevExtreme/"},{"title":"DxColumn组件使用","text":"属性 &lt;DxColumn caption=&quot;库位&quot; :allow-editing=&quot;false&quot; data-field=&quot;goodsPlaceCode&quot; cell-template=&quot;1&quot; // 设置固定值 /&gt;","link":"/2020/12/26/DxColumn/"},{"title":"JavaScript高级语法","text":"浏览器引擎常见内核 Gekcko Trident Webkit Blink js常见引擎 spiderMonkey chakra javaScriptCore V8 浏览器内核与js引擎的关系（以Webkit为例） ebkit是由webcore和javaScriptCore组成 v8引擎的原理介绍 v8是c++编写的google高性能javaScript和WebAssembly引擎，它用于Chrome和node.js等使用 v8可以独立运行，也可以嵌入到任何c++应用程序中 流程 内存管理与内存泄露 作用域，作用域提升，执行上下文 foo() function foo() { console.log(age) var m = 10 var n = 20 console.log(m) function brr() { console.log(age) } brr() } var age = 12 var message = 'holle' function foo() { console.log(message) } function demo() { var message = 'zj' foo() } demo() 闭包闭包定义闭包由两部分组成:一个函数并且可以访问自由变量一个函数如果它可以访问外层作用域的自由变量，那么这个函数是一个闭包广义角度来说js创建的所有的函数都是闭包，从狭义来说，js中一个函数有访问外层作用域的自由变量才是闭包 function foo() { var name = 'zj' return function bar() { console.log('bar', name) } } var fn = foo() fn() // bar函数与name自由变量组成闭包 // 解决内存泄露 fn=null 闭包缺点 会导致内存泄露 function foo() { var name = 'foo' var age = 18 return function bar() { console.log(name) console.log(age) } } var fn = foo() fn() 如何形成闭包内存泄露 高阶函数 一个函数如果接受另一个函数作为参数称为高阶函数 function foo(count){ count() } function bar(){ consle.log('bar') } foo(bar) 一个函数会返回另一个函数作为返回值的函数称为高阶函数 function makeAdder(ar){ return function add(num){ return ar + num } } var add5=makeAdder(5) console.log(add5(6)) console.log(add5(10))","link":"/2022/02/19/JavaScript/"},{"title":"OpenLayers地图使用","text":"绘制基本地图var map = new ol.Map({ // 创建地图 view: new ol.View({ center: ol.proj.transform([106.5025, 29.237015], 'EPSG:4326', 'EPSG:3857'), zoom: 14, // 地图默认缩放级别 maxZoom: 24, // 地图最大缩放级别 minZoom: 1, // 地图最小缩放级别 }), target: 'map', // 地图容器id }) var offlineMapLayer = new ol.layer.Tile({ // 创建一个使用离线地图瓦片的层 source: new ol.source.XYZ({ url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png', }) }); var pointmove = new ol.interaction.Select({ //鼠标经过地图高亮 condition: ol.events.condition.pointerMove }); map.addInteraction(pointmove); map.addLayer(offlineMapLayer); // 将层添加进地图 清除图层map.removeLayer(图层名) // 清除第三个图层 map.removeLayer(map.getLayers().array_[3]); 根据经纬度渲染热力图fnPost(params, \"/api/v1/octopus/network/get/coordinate\").then(res => { if (res.statusCode == 600) { var heatData = { type: \"FeatureCollection\", features: [] } res.data.forEach((item) => { heatData.features.push( { \"type\": \"Feature\", \"properties\": {}, \"geometry\": { type: \"Point\", \"coordinates\": [item.longitude, item.latitude] } } ) }) var vectorSource = new ol.source.Vector({ features: (new ol.format.GeoJSON()).readFeatures(heatData, { dataProjection: 'EPSG:4326', featureProjection: 'EPSG:4326' }) }); // Heatmap热力图 vector = new ol.layer.Heatmap({ source: vectorSource, blur: parseInt(5, 10), radius: parseInt(5, 10), }); map.addLayer(vector); } }) 渲染管线let dataList = [ { startLongitude: 106.433106372,startLatitude: 29.835798934, endLongitude: 106.419721375, endLatitude: 29.837886913 }, ]; console.log([ol.proj.transform([106.5125, 29.237015], 'EPSG:4326', 'EPSG:4326'), ol.proj.transform([106.5225, 29.247015], 'EPSG:4326', 'EPSG:4326')]); console.log([[11856917.263118552, 3405847.4589919476], [11858030.458026484, 3407123.2333637313]]); console.log(new ol.geom.LineString([[11856917.263118552, 3405847.4589919476], [11858030.458026484, 3407123.2333637313]])) dataList.forEach(res => { let YT = [ol.proj.transform([res.startLongitude, res.startLatitude], 'EPSG:4326', 'EPSG:4326'), ol.proj.transform([res.endLongitude, res.endLatitude], 'EPSG:4326', 'EPSG:4326')] wireFeature.push(new ol.Feature({ geometry: new ol.geom.LineString(YT) }),) }) var pointStyle = new ol.style.Style({ stroke: new ol.style.Stroke({ //设置线的颜色样式 color: '#E4920F, lineCap: 'round',// 设置线的两端为圆头 width: 2 // 线的粗细 }), }) let lineSource = new ol.source.Vector({ features: wireFeature, }); let lineLayer = new ol.layer.Vector({ source: lineSource, }); map.addLayer(lineLayer); //添加线 地图点击获取位置map.on('click', function(e) { console.log('经度' + e.coordinate[0], '纬度' + e.coordinate[1]); }) 渲染点点的颜色可改变// res.data数据格式为[{ code: \"88847\", latitude: 29.835798934, longitude: 106.433106372 }, { code: \"88847\", latitude: 29.835798934, longitude: 106.433106372 }] var arrList=[]; fnPost(params, \"/api/v1/octopus/network/get/coordinate\").then(res => { res.data.forEach((item) => { let floot = [item.longitude, item.latitude]; arrList.push(floot) }) var mutiPoint = new ol.Feature({ geometry: new ol.geom.MultiPoint(arrList) }) var vectorSource = new ol.source.Vector({ features: [mutiPoint] }); var pointStyle = new ol.style.Style({ // 点的样式 image: new ol.style.Circle({ radius: 3, //点的大小 fill: new ol.style.Fill({ //点的样式颜色 color: \"red\", }), }), }) var vectorLayer = new ol.layer.Vector({ source: vectorSource, style: pointStyle }); map.addLayer(vectorLayer) } 图片做为点var mutiPoint = new ol.Feature({ // 多点要素 geometry: new ol.geom.MultiPoint([ ol.proj.transform([106.5125, 29.237015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5225, 29.247015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5325, 29.237015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5425, 29.257015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5035, 29.237015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5045, 29.247015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.4955, 29.237015], 'EPSG:4326', 'EPSG:3857'), ol.proj.transform([106.5065, 29.257015], 'EPSG:4326', 'EPSG:3857') ]) }) var imgStyle = new ol.style.Style({ // 地图上绘制图片 image: new ol.style.Icon({ size: [25, 25], // 图片大小 anchor: [0.5, 0.5],// 图片位置偏移上下左右,[-0.5,-0.5] src: 'commonGis/images/pumpOpen.png', // 图片,路径 }) }) var vectorSource = new ol.source.Vector({ features: [mutiPoint] }); var vectorLayer = new ol.layer.Vector({ source: vectorSource, style: imgStyle }); map.addLayer(vectorLayer); //添加点 清除图层map.removeLayer(map.getLayers().array_[2]); map.removeLayer(map.getLayers().array_[map.getLayers().array_.length - 1]);","link":"/2020/12/26/OpenLayers%E5%9C%B0%E5%9B%BE%E4%BD%BF%E7%94%A8/"},{"title":"axios参数说明","text":"Content-Type和对应参数的处理方式application/jsonaxios默认Content-type是采用application/json;charset=UTF-8(json字符串形式) application/x-www-form-urlencoded 特点是提交的参数按照 key1=val1&amp;key2=val2 的方式进行编码，key和val会进行了URL转码。而要实现这种参数的序列化，最简单的方法是引入qs库。 1.前端方式一 var data = new URLSearchParams() data.append('name',name) data.append('age' , age) axios( { method:'post', url: url, data : data, } ).then(res =&gt; res).catch(err =&gt; err) 2.前端方式二 修改axios请求头Content-Type的值为application/x-www-form-urlencoded即可 multipart/form-data这也是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，就要让请求Content-Type 等于这个值。这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持 1.前端方式一 let loginParams = {}; const data = new FormData(); for (const key in loginParams) { data.append(key, loginParams[key]); } axios( { method:'post', url: url, data : data, } ).then(res =&gt; res).catch(err =&gt; err) 2.前端方式二 修改axios请求头Content-Type的值为multipart/form-data即可 text/plain这种类型主要用于发送纯文本数据 axios( { method:'post', url: url, data : '纯文本', } ).then(res =&gt; res).catch(err =&gt; err) qs.sringify和JSON.stringify的区别假设我要提交的数据是： var a = {name:'hehe',age:10}; qs.stringify序列化结果如下 name=hehe&amp;age=10 而JSON.stringify序列化结果如下： &quot;{&quot;a&quot;:&quot;hehe&quot;,&quot;age&quot;:10}&quot;","link":"/2024/07/31/axios/"},{"title":"axios请求封装步骤","text":"axios封装一共有四步 第一步 创建axios 实例 const service = axios.create({ baseURL: 'http://192.168.10.121:6911', // 请求地址 withCredentials: true, // 是否应许头部携带cookie timeout: 5000 // 执行事件间隔 }) 第二步 请求拦截 service.interceptors.request.use( &lt;!--config是请求前数据--&gt; config =&gt; { config.headers.caid = 649; 设置请求头中caid等于649 &lt;!-- 判断token是否存在 --&gt; if (sessionStorage.getItem('token')) { &lt;!-- 将token设置成请求头 --&gt; config.headers.token = JSON.parse(sessionStorage.getItem('userInfo')).Token; } return config; }, err =&gt; { return Promise.reject(err);// 错误信息 }, ); 第三步 响应拦截 service.interceptors.response.use( response =&gt; { &lt;!-- response后端返回数据 --&gt; if (response.data.Code === 401) { router.push({ path: '/login', }); } return response; }, error =&gt; { &lt;!-- 错误后执行方法 --&gt; if (error &amp;&amp; error.response) { switch (error.response.status) { case 401: error.message = '没有权限'; router.push({ path: '/login', }); break; case 500: error.message = '未知错误'; break; } } return Promise.reject(error); }, ); 第四步 抛出方法 export default service 完整代码 import axios from 'axios' &lt;!-- 创建一个 axios 实例 --&gt; const service = axios.create({ &lt;!-- 请求地址 --&gt; baseURL: 'http://192.168.10.121:6911', &lt;!-- 是否应许头部携带cookie --&gt; withCredentials: true, &lt;!-- 执行事件间隔 --&gt; timeout: 5000 }) &lt;!-- 请求拦截 --&gt; service.interceptors.request.use( &lt;!-- config是请求前数据 --&gt; config =&gt; { &lt;!-- 设置请求头中caid等于649 --&gt; config.headers.caid = 649; &lt;!-- 判断token是否存在 --&gt; if (sessionStorage.getItem('token')) { &lt;!-- 将token设置成请求头 --&gt; config.headers.token = JSON.parse(sessionStorage.getItem('userInfo')).Token; } return config; }, error =&gt; { &lt;!-- 错误信息 --&gt; return Promise.reject(error); }, ); &lt;!-- 响应拦截 --&gt; service.interceptors.response.use( response =&gt; { &lt;!-- response后端返回数据 --&gt; if (response.data.Code === 401) { sessionStorage.removeItem('userInfo'); router.push({ path: '/login', }); } return response; }, error =&gt; { &lt;!-- 错误后执行方法 --&gt; if (error &amp;&amp; error.response) { switch (error.response.status) { case 401: error.message = '没有权限'; sessionStorage.removeItem('userInfo'); router.push({ path: '/login', }); break; case 500: alert('未知错误'); error.message = '未知错误'; break; } } return Promise.reject(error); }, ); export default service get和post封装(可有可无) export default function ajax(url = '', data = {}, type = 'GET') { return new Promise(function(resolve, reject) { let promise; if (type === 'GET') { // 准备 url query 参数数据 let dataStr = ''; // 数据拼接字符串 Object.keys(data).forEach(key =&gt; { dataStr += key + '=' + data[key] + '&amp;'; }); if (dataStr !== '') { dataStr = dataStr.substring(0, dataStr.lastIndexOf('&amp;')); url = url + '?' + dataStr; } // 发送 get 请求 promise = axios.get(url); } else { // 发送 post 请求 promise = axios.post(url, data); } promise.then(response =&gt; { if (response.data.Code === 100) { resolve(response.data); } else { reject(Message.error(response.data.Desc)); } }).catch(() =&gt; { reject(Message.error('出错了')); }); }); }","link":"/2021/02/23/axios%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E6%AD%A5%E9%AA%A4/"},{"title":"css与css3学习","text":"阿杰博客 css学习 结构属性隐藏 style=&quot;visibility: hidden&quot; html结构属性隐藏 可以 css3旋转 transform: rotate(角度deg): 小细节overflow属性中auto和scroll的区别 scroll:内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容 auto:如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 最大的区别就是auto时 内容没被剪切时是不会产生滚动条的，scroll:无论剪没剪切都产生滚动条 滚动条样式修改/* 滚动条上的按钮 (上下箭头) */ ::-webkit-scrollbar-button { /* background: red; */ } /* ::-webkit-resizer */ /* ::-webkit-resizer { background: red; } */ /* 当同时有垂直滚动条和水平滚动条时交汇的部分 */ ::-webkit-scrollbar-corner { background: red; } /* 滚动条宽度设置 */ ::-webkit-scrollbar { width: 5px; height: 5px; } /* 滚动条上的滚动滑块*/ ::-webkit-scrollbar-thumb { border-radius: 50px; -webkit-box-shadow: inset 0 0 5px rgba(250, 2, 2, 0.2); background: rgba(243, 1, 1, 0.952); } /*滚动条轨道*/ ::-webkit-scrollbar-track { border-radius: 50px; background: rgba(144, 0, 248, 0.992); } 强制不换行white-space: nowrap; 强制不换行 可以继承父元素的toptop: unset; display介绍nonenone这个值表示此元素将不被显示 block此元素将显示为块级元素，此元素前后会带有换行符 inlineinline的作用即可以将一个块级元素转换成行内元素，那么这个块级元素将不能再设置宽和高以及上下方向的margin和padding。 inline-blockinline-block 实际上我们就可以才出来它是结合了inline和block的特性于一身。即设置了inline-block属性的元素既具有block元素可以设置width和height属性的特性，又保持了inline元素不换行的特性。 inherit规定应该从父元素继承 display 属性的值。","link":"/2020/12/26/css/"},{"title":"docker","text":"安装地址https://www.docker.com/ 命令# 构建镜像（-t 给镜像起名，末尾的 . 表示当前目录） docker build -t my-frontend . # 运行容器（-d 后台运行，-p 端口映射，--name 容器名）4000-4100:4000-4100 docker run -d -p 8080:80 --name my-app my-frontend # 查看正在运行的容器 docker ps # 查看所有 docker ps -a 查看最近创建的容器 docker ps -l # 删除单个容器 docker rm -f my-nginx 强行删除所有容器 docker rm -f $(docker ps -aq) # 删除单个镜像 docker rmi my-frontend # 查看有哪些镜像 docker images # 重启名为 my-nginx 的容器 docker restart my-nginx # 进入容器 docker exec -it 容器名称 # 启动名为 my-nginx 的容器 docker start my-nginx # 直接进入容器运行mysql docker exec -it mysql-container mysql -u root -p 容器内的命令# 查看所有已安装软件 apk info -v # 查找特定软件 apk info | grep nginx Docker 引擎{ &quot;builder&quot;: { &quot;gc&quot;: { &quot;defaultKeepStorage&quot;: &quot;20GB&quot;, &quot;enabled&quot;: true } }, &quot;dns&quot;: [ &quot;8.8.8.8&quot;, &quot;1.1.1.1&quot; ], &quot;experimental&quot;: false, &quot;registry-mirrors&quot;: [ &quot;https://docker.xuanyuan.me&quot; ] } docker-compose.ymlservices: web: build: . # 使用当前目录的 Dockerfile 构建 image: web:1.0 # 镜像名称 container_name: nginx-container # 容器名称 ports: - &quot;4000-4100:4000-4100/tcp&quot; - &quot;80:80&quot; # 实际 Web 端口","link":"/2025/06/18/docker/"},{"title":"electron桌面端vue","text":"创建vue项目vue create electron-vue-demo 安装electron环境(安装过程会让你选择版本)vue add electron-builder 检验是否安装成功background.js文件出现 &quot;electron:build&quot;: &quot;vue-cli-service electron:build&quot;, &quot;electron:serve&quot;: &quot;vue-cli-service electron:serve&quot;, 桌面端应用启动命令npm run electron:serve 桌面端应用打包命令npm run electron:build","link":"/2020/12/26/electron%E6%A1%8C%E9%9D%A2%E7%AB%AFvue/"},{"title":"element","text":"element全局修改样式scc代码//1.button按钮样式重写 //通用按钮样式 .el-button { height: 28px ; padding: 0 16px ; font-size: 12px ; // border: 0 ; border-radius: 2px 2px 2px 2px ; } // .el-button:hover, // .el-button:active, // .el-button:focus { // background: #1D97E5 ; // color: #fff ; // } //灰色通用按钮默认样式 .el-button-gray { min-width: 10px; background: #f2f3f5; border-radius: 2px 2px 2px 2px; opacity: 1; color: #545861; font-size: 12px; border: 0; font-weight: 400; } //蓝色通用按钮默认样式 .el-button-blue { border: 0; border-radius: 2px 2px 2px 2px; background: #1D97E5 !important; color: #fff !important; } //蓝色14字好通用按钮默认样式 .el-button-blue14 { font-size: 14px !important; background: #1D97E5 !important; color: #fff !important; } //图标通用按钮默认样式 .el-button-icon { min-width: 10px; background: #f2f3f5; color: #545861; font-size: 12px; .iconfont { font-size: 12px; margin-right: 8px; } } //无样式按钮 .el-button-empty{ height: auto ; padding: 0; border:0; border-radius: 0 ; background: transparent; } .el-button-empty:hover,.el-button-empty:active,.el-button-empty:focus{ background: transparent ; color:#a3a7b0; } .el-button-empty .iconfont{ font-size: 16px; font-weight: 700; color:#a3a7b0; } .el-button-empty:hover .iconfont,.el-button-empty:active .iconfont,.el-button-empty:focus .iconfont{ color:#1D97E5; } //2.输入框 .el-input { width: 322px; height: 28px; font-size:12px; color: #545861; } .el-input__inner { height: 28px !important; line-height: 28px !important; border-radius: 2px 2px 2px 2px !important; border: 0 !important; border: 1px solid #E5E9F1 !important; } .el-input__icon { display: flex; align-items: center; justify-content: center; } //禁用状态 .el-input.is-disabled .el-input__inner { font-size: 12px; color: #C0C4CB; background: transparent; } .el-input.is-disabled .el-input__wrapper { background: transparent; } .el-textarea.el-input--default.is-disabled { background: transparent; } .el-textarea.is-disabled .el-textarea__inner { background: transparent; } //输入框placeholder样式 input::-webkit-input-placeholder { color: #C1C5CE; font-size: 12px; } input::-moz-placeholder { /* Mozilla Firefox 19+ */ color: #C1C5CE; font-size: 12px; } input:-moz-placeholder { /* Mozilla Firefox 4 to 18 */ color: #C1C5CE; font-size: 12px; } input:-ms-input-placeholder { /* Internet Explorer 10-11 */ color: #C1C5CE; font-size: 12px; } //3.间距 .margin_left_8{ margin-left: 8px !important ; } .margin_left_16{ margin-left: 16px !important; } //4.公共表格样式 //表格上方样式 .header_wrapper { height: 52px; padding: 12px 16px; background: #fff; display: flex; justify-content: space-between; .header_right{ display:flex; } } //表格内部样式 .table_main{ height:calc(100vh - 186px); } .el-table thead { height: 40px; background: #F0F2F5; // box-shadow: inset 0px -1px 0px 1px #E5E9F1, inset -1px 0px 0px 1px #E5E9F1; border-top: 1px solid #E5E9F1; border-bottom: 1px solid #E5E9F1; } .el-table thead tr, .el-table thead th.el-table__cell { background: transparent; } .el-table th.el-table-fixed-column--right.el-table__cell .cell { justify-content: center; } .el-table.is-scrolling-right th.el-table-fixed-column--right, .el-table.is-scrolling-none th.el-table-fixed-column--right, .el-table .el-table-fixed-column--right.is-first-column.is-leaf.el-table__cell { background-color: #F0F2F5; z-index: 9; } .el-table thead tr th .cell { color: #545861; font-weight: normal; } .el-table .is-center.el-table__cell{ padding: 0 16px; } .el-table .is-center.el-table__cell .cell { padding: 0; display: flex; justify-content: space-between; } .el-table tr th, .el-table tr td { border-right: 1px solid #E5E9F1; height: 40px; box-sizing: border-box; } .el-table tr th:first-of-type, .el-table tr td:first-of-type { border-left: 1px solid #E5E9F1; } .el-table .el-table__cell { padding: 0; height: 40px; line-height: 40px; box-sizing: border-box; } .el-table th.is-center.el-table__cell .cell{ display:flex; justify-content: center; } //状态按钮状态 .el-table .state { font-size: 12px; color: #2a304d; display: flex; align-items: center; } .el-table .state_dot { width: 8px; height: 8px; border-radius: 50%; } .el-table .state .state_success { background: #00B42A; } .el-table .state .state_info { background: #C0C4CB; } .el-table .state_des { margin-left: 8px; } .el-table .el-table-fixed-column--right.el-table__cell { padding: 0 16px; } .el-table .el-table-fixed-column--right.el-table__cell .cell { padding: 0; display: flex; } .el-button + .el-button{ margin-left:0px; } //5.分页器样式 .papagination_wrapper { height: 50px; display: flex; align-items: center; } .el-pagination .el-input__wrapper { padding: 0; width: 40px; } .el-pagination .el-input__suffix{ right:22px !important; } .el-pagination .el-input__wrapper .el-input__inner { width: 40px; height: 24px; box-sizing: border-box; } .el-pagination__editor.el-input { width: 40px; padding: 0; box-sizing: border-box; } .el-pagination__editor { min-width: 40px; } .el-pagination .el-input__suffix { position: relative; right: 8px; } .el-button.is-circle { border: 0; border-radius: 0; font-size: 17px; background: transparent; color: #5D6073; font-weight: bold; } //6.弹窗样式 .el-overlay-dialog { display: flex; justify-content: center; align-items: center; } .el-dialog__wrapper{ display:flex; justify-content: center; align-items:center; } .el-dialog { width: 402px; margin: 0; max-height: 750px; overflow-y: auto; } .el-dialog .el-dialog__header { height: 52px; line-height: 52px; padding: 0 16px; color: #2A304D; border-bottom: 1px solid #E5E9F1; font-weight: normal; } .el-dialog .el-dialog__header .el-dialog__title { font-weight: normal; font-size: 16px; } .el-dialog .el-dialog__body { padding: 0 40px; } .el-dialog .el-dialog__body .el-form-item__label { display: block; text-align: left !important; color: #5D6073; font-size: 12px; margin-bottom: 8px; height: 28px; line-height: 28px; } .el-dialog .el-tree-node__label { font-size: 12px; color: #545861 } .el-dialog .el-form-item { display: flex; flex-direction: column; font-size: 12px; margin-top: 16px; margin-bottom: 0; } .el-dialog .el-form-item .el-form-item__content{ margin-left: 0 !important; line-height:28px; } .el-dialog .el-input__wrapper .el-input__inner { color: #545861; } .el-dialog__footer { height: 60px; background: #F5F6F9; margin-top: 24px; padding-top: 0; line-height: 60px; } .el-dialog__footer .el-button.el-button--default, .el-dialog__footer .el-button.el-button--primary.el-button--default, .el-dialog__footer .el-button--primary.is-plain { height: 28px; border-radius: 4px 4px 4px 4px; opacity: 1; border: 1px solid #C1C5CE; color: #5D6073; font-size: 14px; background: transparent; } .el-dialog__footer .el-button.el-button--default:hover { color: #fff; background: #1D97E5; } .el-dialog .el-radio__label { font-size: 12px; color: #5D6073; } .el-textarea__inner { color: #5D6073; font-size: 12px; box-shadow: none; } .el-textarea__inner:hover { box-shadow: none; } .el-textarea.el-input--default { border: 1px solid #E5E9F1; // box-shadow: none; } .el-textarea.el-input--default:hover { box-shadow: 0 0 0 1px #1D97E5 inset; } .el-input-number { line-height: 28px; } .el-input-number.is-controls-right .el-input-number__decrease { height: 14px; line-height: 14px !important; top: 13.5px; right:-1px; } .el-input-number.is-controls-right .el-input-number__increase { height: 14px; line-height: 14px !important; top: 2px; right:-1px; } .el-dialog__footer .el-button + .el-button{ margin-left:12px; } //宽弹窗 .el-dialog-mid { width: 764px; max-height:750px; position:relative; } .el-dialog-mid .el-dialog__body .el-form{ display: flex; justify-content: space-between; flex-wrap: wrap; } .el-dialog-mid .el-dialog__body .el-form .el-form-item{ width: 320px; } .el-dialog-mid .el-dialog__header{ position:absolute; top:0; left:0; width:100%; background: #fff; z-index: 99; } .el-dialog-mid .el-dialog__footer{ position:absolute; bottom:0; left:0; width:100%; z-index:99; } .el-dialog-mid .el-dialog__body{ box-sizing: border-box; padding-top: 52px; padding-bottom: 84px; overflow-y: auto; max-height: 750px; } .el-textarea__inner { border-radius: 2px; height: 88px !important; min-height: 88px !important; } // 滚动条样式调整 //滚动条的宽度 ::-webkit-scrollbar { width: 8px; height: 8px; } //滚动条的滑块 ::-webkit-scrollbar-thumb { background-color: #d8dadc; border-radius: 4px; } ::-webkit-scrollbar-thumb:hover{ background-color:#c4c5c9; }","link":"/2022/10/09/element/"},{"title":"es6温故而知新","text":"let 块级作用域 区别 如var和let的区别 var a = []; for (var i = 0; i &lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 10 ------------- var a = []; for (let i = 0; i &lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 6 特殊例子 for (let i = 0; i &lt; 3; i++) { let i = 'abc'; console.log(i); } // abc // abc // abc -------------------------------- // 内层变量可能会覆盖外层变量。 var tmp = new Date(); function f() { console.log(tmp); if (false) { var tmp = 'hello world'; } } f(); // undefined // 用来计数的循环变量泄露为全局变量。 var s = 'hello'; for (var i = 0; i &lt; s.length; i++) { console.log(s[i]); } console.log(i); // 5 let例子 function f1() { let n = 5; if (true) { let n = 10; } console.log(n); // 5 } 块级作用域的出现，匿名立即执行函数不在必要了 // IIFE 写法 (function () { var tmp = ...; ... }()); // 块级作用域写法 { let tmp = ...; ... } 注意 块级作用域必须有大括号,否则JavaScript 引擎就认为不存在块级作用域。 // 第一种写法，报错 if (true) let x = 1; // 第二种写法，不报错 if (true) { let x = 1; } 函数同理 不存在变量提升 var与let区别 // var 的情况 console.log(foo); // 输出undefined var foo = 2; // let 的情况 console.log(bar); // 报错ReferenceError let bar = 2; 暂时性死区 let不能在声明前赋值 var tmp = 123; if (true) { tmp = 'abc'; // ReferenceError let tmp; } typeof方法无效 1.存在暂时性死区typeof方法不在是百分之百安全操作 typeof x; // ReferenceError let x; 2.如果一个变量根本没有被声明（反而不报错） typeof undeclared_variable // &quot;undefined&quot; 有些“死区”比较隐蔽 情况1 function bar(x = y, y = 2) { return [x, y]; } bar(); // 报错 情况2 function bar(x = 2, y = x) { return [x, y]; } bar(); // [2, 2] 特殊情况 // 不报错 var x = x; // 报错 let x = x; // ReferenceError: x is not defined 不允许在相同作用域内重复声明 // 报错 function func() { let a = 10; var a = 1; } // 报错 function func() { let a = 10; let a = 1; } function func(arg) { let arg; } func() // 报错 function func(arg) { { let arg; } } func() // 不报错 块级作用域与函数声明1.允许在块级作用域内声明函数。 2.函数声明类似于var，即会提升到全局作用域或函数作用域的头部。 3.同时，函数声明还会提升到所在的块级作用域的头部。 注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。 // 块级作用域内部的函数声明语句，建议不要使用 { let a = 'secret'; function f() { return a; } } // 块级作用域内部，优先使用函数表达式 { let a = 'secret'; let f = function () { return a; }; } const 声明时必须赋值 const foo; // SyntaxError: Missing initializer in const declaration 值不可改变 const PI = 3.1415; PI // 3.1415 PI = 3; // TypeError: Assignment to constant variable. 作用域和let相同 if (true) { const MAX = 5; } MAX // Uncaught ReferenceError: MAX is not defined 暂时性死区与let相同 if (true) { console.log(MAX); // ReferenceError const MAX = 5; } ------- var message = &quot;Hello!&quot;; let age = 25; // 以下两行都会报错 const message = &quot;Goodbye!&quot;; const age = 30; 本质 1.基本类型的数据（数值、字符串、布尔值）：保证指向那个地址内存不发生变化，即为常量 2.复合类型的数据（主要是对象和数组）：只能保证指向那个指针不发生变化（指针固定），但数据是可以变化的 const foo = {}; // 为 foo 添加一个属性，可以成功 foo.prop = 123; foo.prop // 123 // 将 foo 指向另一个对象，就会报错 foo = {}; // TypeError: &quot;foo&quot; is read-only --------- const a = []; a.push('Hello'); // 可执行 a.length = 0; // 可执行 a = ['Dave']; // 报错 ---------------- 如果真的想将对象冻结，应该使用Object.freeze方法。 const foo = Object.freeze({}); // 常规模式时，下面一行不起作用； // 严格模式时，该行会报错 foo.prop = 123; --------------- 将对象彻底冻结的函数。 var constantize = (obj) =&gt; { Object.freeze(obj); Object.keys(obj).forEach( (key, i) =&gt; { if ( typeof obj[key] === 'object' ) { constantize( obj[key] ); } }); }; ES6 声明变量的六种方法ES5 只有两种声明变量的方法：var命令和function命令（2种）。 ES6 var命令,function,let和const命令，import命令和class命令(6种)。 顶层对象的属性顶层对象的属性与全局变量是等价的。 1.let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性. 2.var命令和function命令声明的全局变量，依旧是顶层对象的属性 window.a = 1; a // 1 a = 2; window.a // 2 globalThis对象1.浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。 2.Node 里面，顶层对象是global，但其他环境都不支持。 全局环境中，this会返回顶层对象。但是，Node.js 模块中this返回的是当前模块，ES6 模块中this返回的是undefined。","link":"/2021/06/07/es6/"},{"title":"eslintrc使用","text":"安装插件npm install eslint --save-dev npm install eslint-plugin-vue --save-dev npm install @vue/cli-plugin-eslint --save-dev npm install @babel/eslint-parser --save-dev 使用方法 在vue根目录创建.eslintrc.js文件代码如下 module.exports = { /* 意味着当前目录 */ root: true, env: { /* node: true 表示你的代码将在 Node.js 环境中运行 */ node: true, }, /*'eslint:recommended'是插件eslint提供,'plugin:vue/essential'和'plugin:vue/vue3-essential'是插件eslint-plugin-vue提供是 ESLint*/ extends: [\"eslint:recommended\",\"plugin:vue/essential\",\"plugin:vue/vue3-essential\"], rules: { }, /* 指定要使用的解析器 */ parserOptions: { parser: \"@babel/eslint-parser\", }, }; 在package.json中使用eslintConfig字段配置 \"eslintConfig\": { \"root\": true, \"env\": { \"node\": true }, \"extends\": [ \"plugin:vue/vue3-essential\", \"eslint:recommended\" ], \"parserOptions\": { \"parser\": \"@babel/eslint-parser\" }, \"rules\": {} }, 规则说明\"off\"或者0 //关闭规则关闭 \"warn\"或者1 //在打开的规则作为警告（不影响退出代码） \"error\"或者2 //把规则作为一个错误（退出代码触发时为1） 常见规则列表\"no-alert\": 0,//禁止使用alert confirm prompt \"no-array-constructor\": 2,//禁止使用数组构造器 \"no-bitwise\": 0,//禁止使用按位运算符 \"no-caller\": 1,//禁止使用arguments.caller或arguments.callee \"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名 \"no-class-assign\": 2,//禁止给类赋值 \"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句 \"no-console\": 2,//禁止使用console \"no-const-assign\": 2,//禁止修改const声明的变量 \"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1) \"no-continue\": 0,//禁止使用continue \"no-control-regex\": 2,//禁止在正则表达式中使用控制字符 \"no-debugger\": 2,//禁止使用debugger \"no-delete-var\": 2,//不能对var声明的变量使用delete操作符 \"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/ \"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1} \"no-dupe-args\": 2,//函数参数不能重复 \"no-duplicate-case\": 2,//switch中的case标签不能重复 \"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句 \"no-empty\": 2,//块语句中的内容不能为空 \"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空 \"no-empty-label\": 2,//禁止使用空label \"no-eq-null\": 2,//禁止对null使用==或!=运算符 \"no-eval\": 1,//禁止使用eval \"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值 \"no-extend-native\": 2,//禁止扩展native对象 \"no-extra-bind\": 2,//禁止不必要的函数绑定 \"no-extra-boolean-cast\": 2,//禁止不必要的bool转换 \"no-extra-parens\": 2,//禁止非必要的括号 \"no-extra-semi\": 2,//禁止多余的冒号 \"no-fallthrough\": 1,//禁止switch穿透 \"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3. \"no-func-assign\": 2,//禁止重复的函数声明 \"no-implicit-coercion\": 1,//禁止隐式转换 \"no-implied-eval\": 2,//禁止使用隐式eval \"no-inline-comments\": 0,//禁止行内备注 \"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数） \"no-invalid-regexp\": 2,//禁止无效的正则表达式 \"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量 \"no-irregular-whitespace\": 2,//不能有不规则的空格 \"no-iterator\": 2,//禁止使用__iterator__ 属性 \"no-label-var\": 2,//label名不能与var声明的变量名相同 \"no-labels\": 2,//禁止标签声明 \"no-lone-blocks\": 2,//禁止不必要的嵌套块 \"no-lonely-if\": 2,//禁止else语句内只有if语句 \"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） \"no-mixed-requires\": [0, false],//声明时不能混用声明类型 \"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格 \"linebreak-style\": [0, \"windows\"],//换行风格 \"no-multi-spaces\": 1,//不能用多余的空格 \"no-multi-str\": 2,//字符串不能用\\换行 \"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行 \"no-native-reassign\": 2,//不能重写native对象 \"no-negated-in-lhs\": 2,//in 操作符的左边不能有! \"no-nested-ternary\": 0,//禁止使用嵌套的三目运算 \"no-new\": 1,//禁止在使用new构造一个实例后不赋值 \"no-new-func\": 1,//禁止使用new Function \"no-new-object\": 2,//禁止使用new Object() \"no-new-require\": 2,//禁止使用new require \"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number \"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON() \"no-octal\": 2,//禁止使用八进制数字 \"no-octal-escape\": 2,//禁止使用八进制转义序列 \"no-param-reassign\": 2,//禁止给参数重新赋值 \"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接 \"no-plusplus\": 0,//禁止使用++，-- \"no-process-env\": 0,//禁止使用process.env \"no-process-exit\": 0,//禁止使用process.exit() \"no-proto\": 2,//禁止使用__proto__属性 \"no-redeclare\": 2,//禁止重复声明变量 \"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/ \"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错 \"no-return-assign\": 1,//return 语句中不能有赋值表达式 \"no-script-url\": 0,//禁止使用javascript:void(0) \"no-self-compare\": 2,//不能比较自身 \"no-sequences\": 0,//禁止使用逗号运算符 \"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 \"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用 \"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格 \"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2] \"no-sync\": 0,//nodejs 禁止同步方法 \"no-ternary\": 0,//禁止使用三目运算符 \"no-trailing-spaces\": 1,//一行结束后面不要有空格 \"no-this-before-super\": 0,//在调用super()之前不能使用this或super \"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\"; \"no-undef\": 1,//不能有未定义的变量 \"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined \"no-undefined\": 2,//不能使用undefined \"no-unexpected-multiline\": 2,//避免多行表达式 \"no-underscore-dangle\": 1,//标识符不能以_开头或结尾 \"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; \"no-unreachable\": 2,//不能有无法执行的代码 \"no-unused-expressions\": 2,//禁止无用的表达式 \"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数 \"no-use-before-define\": 2,//未定义前不能使用 \"no-useless-call\": 2,//禁止不必要的call和apply \"no-void\": 2,//禁用void操作符 \"no-var\": 0,//禁用var，用let和const代替 \"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注 \"no-with\": 2,//禁用with \"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格 \"arrow-parens\": 0,//箭头函数用小括号括起来 \"arrow-spacing\": 0,//=>的前/后括号 \"accessor-pairs\": 0,//在对象中使用getter/setter \"block-scoped-var\": 0,//块语句中使用var \"brace-style\": [1, \"1tbs\"],//大括号风格 \"callback-return\": 1,//避免多次调用回调什么的 \"camelcase\": 2,//强制驼峰法命名 \"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号 \"comma-spacing\": 0,//逗号前后的空格 \"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾 \"complexity\": [0, 11],//循环复杂度 \"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的 \"consistent-return\": 0,//return 后面是否允许省略 \"consistent-this\": [2, \"that\"],//this别名 \"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super \"curly\": [2, \"all\"],//必须使用 if(){} 中的{} \"default-case\": 2,//switch语句最后必须有default \"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾 \"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号 \"eol-last\": 0,//文件以单一的换行符结束 \"eqeqeq\": 2,//必须使用全等 \"func-names\": 0,//函数表达式必须有名字 \"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式 \"generator-star-spacing\": 0,//生成器函数*的前后空格 \"guard-for-in\": 0,//for in循环要用if语句过滤 \"handle-callback-err\": 0,//nodejs 处理错误 \"id-length\": 0,//变量名长度 \"indent\": [2, 4],//缩进风格 \"init-declarations\": 0,//声明时必须赋初值 \"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格 \"lines-around-comment\": 0,//行前/行后备注 \"max-depth\": [0, 4],//嵌套块深度 \"max-len\": [0, 80, 4],//字符串最大长度 \"max-nested-callbacks\": [0, 2],//回调嵌套深度 \"max-params\": [0, 3],//函数最多只能有3个参数 \"max-statements\": [0, 10],//函数内最多有几个声明 \"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用 \"new-parens\": 2,//new时必须加小括号 \"newline-after-var\": 2,//变量声明后是否需要空一行 \"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格 \"object-shorthand\": 0,//强制对象字面量缩写语法 \"one-var\": 1,//连续声明 \"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的 \"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首 \"padded-blocks\": 0,//块语句内行首行尾是否要空行 \"prefer-const\": 0,//首选const \"prefer-spread\": 0,//首选展开运算 \"prefer-reflect\": 0,//首选Reflect的方法 \"quotes\": [\"error\", \"single\"],//引号类型单引号:single,双引号:double \"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号 \"radix\": 2,//parseInt必须指定第二个参数 \"id-match\": 0,//命名检测 \"require-yield\": 0,//生成器函数必须有yield \"semi\": [\"error\", \"always\"],//语句强制分号结尾 \"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格 \"sort-vars\": 0,//变量声明时排序 \"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格 \"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格 \"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格 \"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格 \"space-infix-ops\": 0,//中缀操作符周围要不要有空格 \"space-return-throw-case\": 2,//return throw case后面要不要加空格 \"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格 \"spaced-comment\": 0,//注释风格要不要有空格什么的 \"strict\": 2,//使用严格模式 \"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN() \"valid-jsdoc\": 0,//jsdoc规则 \"valid-typeof\": 2,//必须使用合法的typeof的值 \"vars-on-top\": 2,//var必须放在作用域顶部 \"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格 \"wrap-regex\": 0,//正则表达式字面量用小括号包起来 \"yoda\": [2, \"never\"]//禁止尤达条件 项目常用配置在vue项目跟目录创建.eslintrc.js module.exports = { /* 意味着当前目录 */ root: true, env: { /* node: true 表示你的代码将在 Node.js 环境中运行 */ node: true }, /* 是 ESLint 配置中用来扩展或继承已有的规则配置的一个选项需要安装eslint-plugin-vue,eslint */ extends: [\"plugin:vue/vue3-essential\", \"eslint:recommended\"], rules: { /* 禁止使用console */ \"no-console\": process.env.NODE_ENV === \"production\" ? 1 : 0, /* 禁止使用debugger */ \"no-debugger\": process.env.NODE_ENV === \"production\" ? 1 : 0, /* 禁止使用alert */ \"no-alert\": process.env.NODE_ENV === \"production\" ? 1 : 0, /* 强制使用双引号 */ quotes: [2, \"double\"], /* 禁止在条件中使用常量表达式 */ \"no-constant-condition\": 2, /* 强制使用分号结尾 */ semi: [2, \"always\"], /* 强制使用一致的缩进 */ indent: [ \"error\", 2, { SwitchCase: 1 } ], /* 对象字面量项尾不能有逗号 */ \"comma-dangle\": [2, \"never\"], /* 排除defineEmits */ \"no-undef\": 0 }, /* 指定要使用的解析器 */ parserOptions: { parser: \"@babel/eslint-parser\" } };","link":"/2024/08/02/eslintrc/"},{"title":"FormData使用方法详解","text":"FormData的主要用途有两个 将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。 异步上传文件 创建formData对象 创建一个空对象 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //可以通过append()方法来追加数据 formdata.append(&quot;name&quot;,&quot;laotie&quot;); //通过get方法对值进行读取 console.log(formdata.get(&quot;name&quot;));//laotie //通过set方法对值进行设置 formdata.set(&quot;name&quot;,&quot;laoliu&quot;); console.log(formdata.get(&quot;name&quot;));//laoliu 通过表单初始化formData //获得表单按钮元素 var btn=document.querySelector(&quot;#btn&quot;); //为按钮添加点击事件 btn.onclick=function(){ //根据ID获得页面当中的form表单元素 var form=document.querySelector(&quot;#advForm&quot;); //将获得的表单元素作为参数，对formData进行初始化 var formdata=new FormData(form); //通过get方法获得name为advName元素的value值 console.log(formdata.get(&quot;advName&quot;));//xixi //通过get方法获得name为advType元素的value值 console.log(formdata.get(&quot;advType&quot;));//1 } 操作方法 通过get(key)与getAll(key)来获取相对应的值 // 获取key为age的第一个值 formdata.get(&quot;age&quot;); // 获取key为age的所有值，返回值为数组类型 formdata.getAll(&quot;age&quot;); 通过append(key,value)在数据末尾追加数据 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //通过append()方法在末尾追加key为name值为laoliu的数据 formdata.append(&quot;name&quot;,&quot;laoliu&quot;); //通过append()方法在末尾追加key为name值为laoli的数据 formdata.append(&quot;name&quot;,&quot;laoli&quot;); //通过append()方法在末尾追加key为name值为laotie的数据 formdata.append(&quot;name&quot;,&quot;laotie&quot;); //通过get方法读取key为name的第一个值 console.log(formdata.get(&quot;name&quot;));//laoliu //通过getAll方法读取key为name的所有值 console.log(formdata.getAll(&quot;name&quot;));//[&quot;laoliu&quot;, &quot;laoli&quot;, &quot;laotie&quot;] 通过set(key, value)来设置修改数据 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //如果key的值不存在会为数据添加一个key为name值为laoliu的数据 formdata.set(&quot;name&quot;,&quot;laoli&quot;); //通过get方法读取key为name的第一个值 console.log(formdata.get(&quot;name&quot;));//laoli key的值存在，会修改对应的value值 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //通过append()方法在末尾追加key为name值为laoliu的数据 formdata.append(&quot;name&quot;,&quot;laoliu&quot;); //通过append()方法在末尾追加key为name值为laoliu2的数据 formdata.append(&quot;name&quot;,&quot;laoliu2&quot;); //通过get方法读取key为name的第一个值 console.log(formdata.get(&quot;name&quot;));//laoliu //通过getAll方法读取key为name的所有值 console.log(formdata.getAll(&quot;name&quot;));//[&quot;laoliu&quot;, &quot;laoliu2&quot;] //将存在的key为name的值修改为laoli formdata.set(&quot;name&quot;,&quot;laoli&quot;); //通过get方法读取key为name的第一个值 console.log(formdata.get(&quot;name&quot;));//laoli //通过getAll方法读取key为name的所有值 console.log(formdata.getAll(&quot;name&quot;));//[&quot;laoli&quot;] 通过has(key)来判断是否存在对应的key值 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //通过append()方法在末尾追加key为name值为laoliu的数据 formdata.append(&quot;name&quot;,&quot;laoliu&quot;); //判断是否包含key为name的数据 console.log(formdata.has(&quot;name&quot;));//true //判断是否包含key为age的数据 console.log(formdata.has(&quot;age&quot;));//false 通过delete(key)可以删除数据 //通过FormData构造函数创建一个空对象 var formdata=new FormData(); //通过append()方法在末尾追加key为name值为laoliu的数据 formdata.append(&quot;name&quot;,&quot;laoliu&quot;); console.log(formdata.get(&quot;name&quot;));//laoliu //删除key为name的值 formdata.delete(&quot;name&quot;); console.log(formdata.get(&quot;name&quot;));//null 通过XMLHttpRequest发送数据 发送数据 var btn=document.querySelector(&quot;#btn&quot;); btn.onclick=function(){ var formdata=new FormData(document.getElementById(&quot;advForm&quot;)); var xhr=new XMLHttpRequest(); xhr.open(&quot;post&quot;,&quot;http://127.0.0.1/adv&quot;); xhr.send(formdata); xhr.onload=function(){ if(xhr.status==200){ //... } } }","link":"/2021/06/08/formData/"},{"title":"gojs","text":"样式介绍font: &quot;Microsoft YaHei UI&quot; /* 字体 */, stroke: &quot;rgba(23, 26, 29, 0.6)&quot; /* 字体颜色 */, editable: true /* 文本是否可编辑 */, margin: 0, &lt;!-- 外边距 --&gt; overflow: go.TextBlock.OverflowEllipsis, &lt;!-- 隐藏 --&gt; maxLines: 1, &lt;!-- 文本只展示一行 --&gt;","link":"/2022/11/27/gojs/"},{"title":"git笔记","text":"查询命令git status //查看修改过的文件命令 git help //帮助命令，查询git命令的用法 git --version //查询git的版本信息，一般在安装的时候用于证实安装是否成功 添加之后提交代码到本地库git init //初始化仓库 git add a.txt //添加某个文件到本地暂存区 git add . //添加所有目录下修改过的文件 git rm a.txt //移除某个文件，和git add 相反 git commit -m &quot;注释&quot; //提交并增加提交注释，非常重要且常用的命令。用于将所有通过 git add 暂存的文件，提交到本地库。 git diff //比较文件的不同，即暂存区和工作区的差异。 git mv //移动或重命名工作区文件。 git reset //回退版本 本地和服务仓库之间的交互git remote //远程仓库操作 (修改仓库提交地址git remote set-url origin 新的git地址) git remote get-url origin //查看远程仓库地址 git clone //获取代码，把线上的代码克隆到本地环境，XXX是克隆对应的协议链 git fetch //下载远程仓库的代码 git merge //合并分支命令 git pull //下载远程代码并合并 相当于git fetch + git merge git push //上传远程代码并合并,常用命令，用于将本地的文件推送到服务器上 分支操作git branch //查看分支状况 git branch -h //查看其他的命令 git checkout XXX //用来切换分支 git stash //用来临时存放暂不打算提交的文件 git tag //为代码的历史记录某个点打个标签，一般用来标记发布的版本。 git cherry-pick //用于将另一个分支的某次提交代码，合并到当前分支。 git rebase //用于将另一个分支的最新代码，全量合并到当前分支。 git branch (branchname) //创建一个分支 查看日志记录git log //查看历史记录 git reflog //可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作） 设置配置信息git config -e // 针对当前仓库 git config -e --global // 针对系统上所有仓库","link":"/2021/06/18/hello-world/"},{"title":"iframe通讯","text":"子传父&lt;!-- 子页面 --&gt; &lt;script&gt; // 向父页面发送消息 window.parent.postMessage( { type: 'fromChild', data: '子页面数据' }, '*' // 目标源，* 表示所有源，建议替换为具体父页面域名如 &quot;https://parent.com&quot; ); &lt;/script&gt; &lt;!-- 父页面 --&gt; &lt;script&gt; // 监听消息 window.addEventListener('message', (event) =&gt; { // 安全检查：验证来源（重要！） if (event.origin !== 'https://child-site.com') return; if (event.data.type === 'fromChild') { console.log('收到子页面数据:', event.data.data); } }); &lt;/script&gt; 父传子&lt;!-- 父页面 --&gt; &lt;script&gt; const iframe = document.getElementById('myIframe'); iframe.contentWindow.postMessage( { type: 'fromParent', data: '父页面数据' }, ); &lt;/script&gt; &lt;!-- 子页面 --&gt; &lt;script&gt; window.addEventListener('message', (event) =&gt; { if (event.origin !== 'https://parent-site.com') return; if (event.data.type === 'fromParent') { console.log('收到父页面数据:', event.data.data); } }); &lt;/script&gt;","link":"/2025/06/16/iframe/"},{"title":"java＋springBoot","text":"注解学习@RestController 则是@Controller和@ResponseBody这两个注解的组合。它标识的类中的方法返回值会被自动转换为 JSON（或其他格式），而不是渲染视图。 @RequestMapping(&quot;/hello&quot;) @RequestMapping(&quot;/hello&quot;) 是 Spring MVC 中的一个注解，用于将 HTTP 请求映射到处理方法上。它可以用于类级别或方法级别，指定一个 URL 路径，当接收到该路径的请求时，Spring 会调用对应的处理方法。 @RequestMapping 是一个通用的注解，适用于不同的 HTTP 请求方法。 如果你只需要处理某一种 HTTP 方法（例如 GET 或 POST），可以使用更简化的注解，如 @GetMapping、@PostMapping 等。 @Autowired 是 Spring 的自动依赖注入注解，帮助你自动注入所需要的依赖对象。","link":"/2025/06/16/java/"},{"title":"jQuery","text":"文件就绪事件所有jq代码都在文件就绪事件里面 第一种 $(document).ready(function(){ // 开始写 jQuery 代码... }); 第二种 $(function(){ // do something }); 第三种 $().ready(function(){ //do something }) 获取单选框是否选中$('#orderSelected').is(':checked') $('#cb').attr('checked'); isChecked = $('#cb').prop('checked'); 单选框设置选中$('#cb').attr('checked',true); $('#cb').prop('checked',true); let idArry = [ { id: 'control1', value: '无规则' }, ]; idArry.forEach(res => { $(`input[name=${res.id}][value=${res.value}]`).prop(\"checked\", true); } 基本语法$(this).hide() - 隐藏当前元素 $(\"p\").hide() - 隐藏所有 &lt;p> 元素 $(\"p.test\").hide() - 隐藏所有 class=\"test\" 的 &lt;p> 元 $(\"#test\").hide() - 隐藏 id=\"test\" 的元素 获取属性值$('#add')attr(\"data-url\") 给inpuut和下拉框赋值 $('#reviewId').val($this.attr('data-Id')) 下拉框要刷新 $(\"#solutionType\").selectpicker('refresh') 显示html中id为handle-content-review-mask的节点或隐藏$('#handle-content-review-mask').show() $('#handle-content-review-mask').hide() ajaxUPdatelsReadAPI是api $.ajax({ url: UPdatelsReadAPI, type: 'post', data: JSON.stringify({ id: 2, isread: 1 }), contentType: \"application/json; charset=utf-8\", dataType: \"json\", success: function (res) { console.log(res); if (res.Code == 100) { console.log(res); } } }); 禁用/启用input框$(\"#handle-reason\").attr(\"disabled\",true); $('.hanldeCommitqueren').removeAttr(\"disabled\") 下拉框设置默认值直接加selected&lt;select name=\"MISSIONTYPE\" id=\"MISSIONTYPE\"> &lt;option value =\"非敏感用户\" selected>非敏感用户&lt;/option> &lt;option value =\"敏感用户\">敏感用户&lt;/option> &lt;/select> formData用法let formData = new FormData(); formData.append('upload', fileList[i]); let xhr = new XMLHttpRequest(); xhr.open('POST', uploadAPI); xhr.send(formData); // 定义上传完成后的回调函数 xhr.onload = function () { if (xhr.status === 200) { } else { } }; 改变背景颜色(为白色)$('.hanldeCommitqueren').css(\"background-color\",\"white\") 向末尾添加html代码// 给下拉框渲染值 $(\"#statistics\").append(`&lt;option value=${itme.content}>${itme.name}&lt;/option>`); $(\"#statistics\").selectpicker('refresh') //刷新DOM 移除元素内容$(selector).empty() attr用法$(\"img\").attr(\"width\",\"180\"); 下拉框并且可以用户自己输入&lt;div class=\"controls\"> &lt;input type=\"text\" name=\"feng_kong_cuo_shi_1\" list=\"feng_kong_cuo_shi_1\"> &lt;datalist id=\"feng_kong_cuo_shi_1\" style=\"display:none;\"> &lt;option value=\"土地流转抵押\">土地流转抵押&lt;/option> &lt;option value=\"土地收益权质押\">土地收益权质押&lt;/option> &lt;/datalist> &lt;/div> 给表单赋值let obj = $('#addOrUpdateProVerForm').serializeArray(); //获取表单属性属性字段 html标签必须加name obj.forEach(res => { $(`#${res.name}`).val(data[res.name]); })","link":"/2021/06/19/jq/"},{"title":"原生js","text":"数组方法 push末尾添加数据:返回新数组长度、原数组改变Arry.push(数据) 过滤filter:返回新数组 、原数组未改变 var nums = [10, 2, 5, 190, 20]; var newNums = nums.filter((item, index, i) => { console.log(item, index, i) //每一个值，下标，数组本身 return false }) console.log(newNums) // 新数组 map映射:返回新数组、原数组未改变 var nums = [1, 2, 5, 190, 20]; var newNums = nums.map((item, index, oneself) => { console.log(item, index, oneself) //每一个值，下标，数组本身 return item * 10 }) console.log(newNums) // 新数组 forEach迭代遍历:无返回值、原数组可以改变var nums = [1, 2, 5, 190, 20]; var newNums = nums.forEach((item, index, oneself) => { console.log(item, index, oneself) //每一个值，下标，数组本身 }) console.log(newNums) //undefined reduce累加或者累减,从左到右:返回新值、原数组未改变 var nums = [1, 2, 5, 190, 20]; var newNums = nums.reduce((total, num) => { return total - num //return total + num }) console.log(newNums) // 返回新值 find查找:返回新值、原数组未改变 var nums = [1, 2, 5, 190, 20]; var newNums = nums.find((total, num, i) => { console.log(total, num, i) //每一个值，下标，数组本身 return total === 1 }) console.log(newNums) // 返回新值 findIndex查找下标:返回下标、原数组未改变 var nums = [1, 2, 5, 190, 20]; var newNums = nums.findIndex((total, num, i) => { console.log(total, num, i) //每一个值，下标，数组本身 return total === 1 }) console.log(newNums) // 返回下标 console.log(nums) concat连接两个数组:返回新数组、原数组未改变 var num1 = [\"S60\", \"S90\"]; var num2 = [\"XC40\", \"XC60\", \"XC90\"]; var nums = num1.concat(num2); console.log(nums) // ['S60', 'S90', 'XC40', 'XC60', 'XC90'] console.log(num1) //[\"S60\", \"S90\"] console.log(num2) //[\"XC40\", \"XC60\", \"XC90\"] atan2(计算点到原点的角度)Math.atan2(dy, dx); 原生ajax封装// 统一的请求地址 var apiUrl = 'http://192.168.10.60:9010' //默认请求地址 let token = localStorage.getItem(\"token\"); // 设置全局token $.ajaxSetup({ //发送请求前触发 complete: function(xhr) { if (xhr.statusCode) { if (xhr.statusCode == 601) { top.location.href = \"../index.html\" //跳入登录页 return false; } else { console.log(\"已经登录！\") } } }, beforeSend: function(xhr) { //可以设置自定义标头 xhr.setRequestHeader('Authorization', token); xhr.setRequestHeader('Content-Type', 'application/json'); } }) // post请求 var fnPost = function(options, url) { // 统一的请求地址 if (url.slice(0, 4) === 'http' || url.slice(0, 4) === 'https') { apiUrl = '' } return new Promise(function(resolve, reject) { $.ajax({ type: 'POST', data: JSON.stringify(options), url: apiUrl + url, dataType: 'json', timeout: 10000, success: function(res) { resolve(res); }, error: function(err) { reject(err) } }) }).catch(_ => { console.log('服务器崩了') }) } // get请求 var fnGet = function(options, url) { return new Promise(function(resolve, reject) { $.ajax({ type: 'GET', data: JSON.stringify(options), url: apiUrl + url, dataType: 'json', success: function(res) { resolve(res) }, error: function(err) { reject(err) } }) }).catch((e) => { console.log('服务器崩了') }) } 类型检查js中有三种typeof、instanceof、Object.prototype.toString.call typeoftypeof NaN // 'number' typeof 123 // \"number\" typeof '123' // \"string\" typeof false // \"boolean\" function f() {} typeof f // \"function\" typeof undefined // \"undefined\" typeof window // \"object\" typeof {} // \"object\" typeof [] // \"object\" // 利用这一点，typeof可以用来检查一个没有声明的变量，而不报错。 if (typeof v === \"undefined\") { // ... } instanceofvar o = {}; var a = []; o instanceof Array // false a instanceof Array // true var o = {}; var a = []; o instanceof Object // true a instanceof Object // true Object.prototype.toString.callObject.prototype.toString.call(null) // '[object Null]' Object.prototype.toString.call([]) // '[object Array] ' Object.prototype.toString.call({}) // '[object Object]' 类型转换 NumberNumber(null) // 0 5 + null // 5 Number('d') // NaN Number('') // 0 Number(undefined) //NaN Boolean特殊情况Boolean(undefined) //false Boolean(null) //false Boolean(false) //false Boolean(0) //false Boolean(NaN) //false Boolean(\"\") //false Boolean('') //false Boolean() //false Boolean([]) // true Boolean({}) // true parseInt:将字符串转为整数左到右 一个参数时parseInt('123') // 123 parseInt(' 81') // 81 parseInt('8a') // 8 parseInt('12**') // 12 parseInt('12.34') // 12 parseInt('15e2') // 15 parseInt('15px') // 15 parseInt('abc') // NaN parseInt('.3') // NaN parseInt('') // NaN parseInt('+') // NaN parseInt('+1') // 1 parseInt('0x10') // 16 parseInt('011') // 11 parseInt(1000000000000000000000.5) // 1 // 等同于 parseInt('1e+21') // 1 parseInt(0.0000008) // 8 // 等同于 parseInt('8e-7') // 8 两个参数parseInt('1000', 10) // 1000 parseInt('1000', 2) // 8 parseInt('1000', 6) // 216 parseInt('1000', 8) // 512 如果第二个参数是0、undefined和null，则直接忽略parseInt('10', 0) // 10 parseInt('10', null) // 10 parseInt('10', undefined) // 10 如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回NaNparseInt('1546', 2) // 1 parseInt('546', 2) // NaN parseFloat:将字符串转为浮点数 从左到右parseFloat('3.14') // 3.14 parseFloat('314e-2') // 3.14 parseFloat('0.0314E+2') // 3.14 parseFloat(true) // NaN Number(true) // 1 parseFloat(null) // NaN Number(null) // 0 parseFloat('') // NaN Number('') // 0 parseFloat('123.45#') // 123.45 Number('123.45#') // NaN isNaN:判断一个值是否为NaNisNaN(NaN) // true isNaN(123) // false isFinite:某个值是否为正常的数值isFinite(Infinity) // false isFinite(-Infinity) // false isFinite(NaN) // false isFinite(undefined) // false isFinite(null) // true isFinite(-1) // true toString:返回字符串 数字let d=111 undefined d.toString() // '111' 函数function f() { a(); b(); c(); } f.toString() // function f() { // a(); // b(); // c(); // } null与undefinednull表示值为空值，即该处的值现在为空。undefined声明了没有赋值 // 变量声明了，但没有赋值 var i; i // undefined // 调用函数时，应该提供的参数没有提供，该参数等于 undefined function f(x) { return x; } f() // undefined // 对象没有赋值的属性 var o = new Object(); o.p // undefined // 函数没有返回值时，默认返回 undefined function f() {} f() // undefined 整数与浮点数 在js中所有整数和浮点数都是以64位浮点数形式存储的即使整数也是如此 某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算。0.1 + 0.2 === 0.3 // false 0.3 / 0.1 // 2.9999999999999996 (0.3 - 0.2) === (0.2 - 0.1) // false 数值表示js 表示数值可以有多种可以直接字面形式表示也可以进制表示、也可以科学计数法表示 科学计数法123e3 // 123000 123e-3 // 0.123 -3.1E+12 // -3100000000000 .1e-23 以下两种情况js会自动装换为科学计数法表示1234567890123456789012 // 1.2345678901234568e+21 0.0000003 // 3e-7 // 小数点后紧跟5个以上的零， // 就自动转为科学计数法 特殊数值 正零和负零-0 === +0 // true 0 === -0 // true 0 === +0 // true (-0).toString() // '0' (+0).toString() // '0' (1 / +0) === (1 / -0) // false // 上面的代码之所以出现这样结果，是因为除以正零得到+Infinity，除以负零得到-Infinity，这两者是不相等的 NaN:它是一个特殊的数字类型NaN === NaN // false [NaN].indexOf(NaN) // -1 typeof NaN // 'number' // 计算反余弦 Math.acos(2) // NaN // 返回一个数的自然对数 Math.log(-1) // NaN 返回一个数的平方根 Math.sqrt(-1) // NaN NaN与任何数（包括它自己）的运算，得到的都是NaN NaN + 32 // NaN NaN - 32 // NaN NaN * 32 // NaN NaN / 32 // NaN Infinity Infinity有正负之分，Infinity表示正的无穷，-Infinity表示负的无穷Infinity === -Infinity // false 1 / -0 // -Infinity -1 / -0 // Infinity Infinity大于一切数值（除了NaN），-Infinity小于一切数值（除了NaNInfinity &gt; 1000 // true -Infinity &lt; -1000 // true Infinity &gt; NaN // false -Infinity &gt; NaN // false Infinity &lt; NaN // false -Infinity &lt; NaN // false Infinity与undefined计算，返回的都是NaNundefined + Infinity // NaN undefined - Infinity // NaN undefined * Infinity // NaN undefined / Infinity // NaN Infinity / undefined // NaN Infinity与null计算时，null会转成0，等同于与0的计算null * Infinity // NaN null / Infinity // 0 Infinity / null // Infinity 其他5 * Infinity // Infinity 5 - Infinity // -Infinity Infinity / 5 // Infinity 5 / Infinity // 0 0 * Infinity // NaN 0 / Infinity // 0 Infinity / 0 // Infinity Infinity + Infinity // Infinity Infinity * Infinity // Infinity Infinity - Infinity // NaN Infinity / Infinity // NaN Base64 转码 btoa:任意值转为Base64var string = 'Hello World!'; btoa(string) // \"SGVsbG8gV29ybGQh\" atob():Base64 编码转为原来的值atob('SGVsbG8gV29ybGQh') // &quot;Hello World!&quot; 这两个方法不适合非 ASCII 码的字符，会报错要将非 ASCII 码字符转为 Base64 编码，必须中间插入一个转码环节，再使用这两个方法。btoa('你好') // 报错 function b64Encode(str) { return btoa(encodeURIComponent(str)); } function b64Decode(str) { return decodeURIComponent(atob(str)); } b64Encode('你好') // \"JUU0JUJEJUEwJUU1JUE1JUJE\" b64Decode('JUU0JUJEJUEwJUU1JUE1JUJE') // \"你好\" 函数定义 function 命令function print(s) { console.log(s); } 函数表达式(赋值给变量)这种写法将一个匿名函数赋值给变量var print = function(s) { console.log(s); }; 特殊情况x 只能在内部使用var print = function x(){ console.log(typeof x); }; Function 构造函数var add = new Function( 'x', 'y', 'return x + y' ); // 等同于 function add(x, y) { return x + y; } var foo = new Function( 'return \"hello world\";' ); // 等同于 function foo() { return 'hello world'; } 函数的重复声明 重复声明时后者会替换前者function f() { console.log(1); } f() // 2 function f() { console.log(2); } f() // 2 函数作用域 1var v = 1; function f() { console.log(v); } f() // 1 2function f(){ var v = 1; } v // ReferenceError: v is not defined 3if (true) { var x = 5; } console.log(x); // 5 函数内部的变量提升function foo(x) { if (x > 100) { var tmp = x - 100; } } // 等同于 function foo(x) { var tmp; if (x > 100) { tmp = x - 100; }; } var a = 1; var x = function () { console.log(a); }; function f() { var a = 2; x(); } f() // 1 var x = function () { console.log(a); }; function y(f) { var a = 2; f(); } y(x) // ReferenceError: a is not defined function foo() { var x = 1; function bar() { console.log(x); } return bar; } var x = 2; var f = foo(); f() // 1 函数参数 省略参数 function f(a, b) { return a; } f( , 1) // SyntaxError: Unexpected token ,(…) f(undefined, 1) // undefined 传递方式 函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。var p = 2; function f(p) { p = 3; } f(p); p // 2 如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。var obj = { p: 1 }; function f(o) { o.p = 2; } f(obj); obj.p // 2 如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。 var obj = [1, 2, 3]; function f(o) { o = [2, 3, 4]; } f(obj); obj // [1, 2, 3] var objs = {d:'d'}; function f(o) { o = {f:'f'}; } f(objs); // {d: 'd'} 函数形参获取 argumentsvar f = function (one) { console.log(arguments[0]); console.log(arguments[1]); console.log(arguments[2]); } f(1, 2, 3) // 1 // 2 // 3 获取高度document.body.clientWidth ==&gt; BODY对象宽度 document.body.clientHeight ==&gt; BODY对象高度 document.documentElement.clientWidth ==&gt; 可见区域宽度 document.documentElement.clientHeight ==&gt; 可见区域高度","link":"/2021/06/23/js/"},{"title":"top.layer.open","text":"基本使用 // 父页 top.layer.open({ type: 2, title: '新增方案', shadeClose: false, area: ['1024px', '700px'], content: '../newModelPlan/addPlan.html?', // 弹框地址 btn: ['确定', '取消'], // 确定 btn1: function(index, layero) { // 父调子方法 var iframeWin = layero.find('iframe')[0].contentWindow; iframeWin.reset_Sure(rowData); parent.layer.close(index); //关闭弹框 parent.window.location.reload();// 刷新父页面 }, // 取消 btn2: function(index, layero) { parent.layer.close(index); //关闭弹框 parent.window.location.reload(); // 刷新父页面 }, success: function(layero, index) { var iframeWin = layero.find('iframe')[0].contentWindow; iframeWin.ontGetAllDictionaries(); // 执行子页面事件方法 }, }); // 子页 关闭弹框 var index = parent.layer.getFrameIndex(window.name); parent.layer.close(index);","link":"/2021/07/18/layer/"},{"title":"markdown语法学习","text":"二级标题三级标题四级标题字体加粗**加粗** 代码 **加粗** 效果 加粗 倾斜字 代码 *倾斜字* 效果 倾斜字 加粗倾斜字 代码 ***加粗倾斜字*** 效果 加粗倾斜字 引用 代码 &gt; &gt; 应用内容 &gt; 效果 应用内容 超链接 代码 ![图片描述](图片路劲) 效果超链接 图片插入 代码 [超链接描述](超链接地址) 效果 有序列表 代码 1. 列表1 //通过数字加一个.以及一个空格表示，后面跟内容 效果 列表1 列表2 列表3 无序列表 代码 - 无序列表1 //通过-加一个空格表示，后面跟内容 效果 无序列表1 无序列表2 无序列表3 表格 代码 | 表头 | 条目一 | 条目二 | | :----: | -----: | -----: | | 项目一 | 项目二 | 项目三 | 效果 表头 条目一 条目二 项目一 项目二 项目三 分隔符（多行显示）*** +空格或者— + 空格","link":"/2020/12/25/markdown/"},{"title":"mysql","text":"命令# 查看数据库 show databases; # 删除数据库 drop database my_db; # 创建数据库 create DATABASE `agileboot-pure`; # 查某个数据库有哪些表 SHOW TABLES FROM `demo-rue`","link":"/2025/06/19/mysql/"},{"title":"nginx命令","text":"常用命令 启动 start nginx 修改配置后重新加载生效 nginx -s reload 重新打开日志文件 重新打开日志文件 快速停止nginx nginx -s stop 完整有序的停止 nginx -s quit","link":"/2022/02/28/nginx/"},{"title":"npm常用命令","text":"查看已安装的全部全局应用npm list -g --depth 0 全局安装和局部安装npm install yarn -g //全局安装 npm install 项目局部安装 指定安装版本（如vee-validate）–save 和–save-dev安装在dependencies(–save)npm install vee-validate@2.2.13 --save npm install vee-validate@2.2.13 -D 安装在devDependencies(–save-dev)npm install vee-validate@2.2.13 --save-dev npm版本降级为6.14.14npm install npm@6.14.14 -g 安装cnpm工具npm i -g cnpm --registry=https://registry.npm.taobao.org 强制重新构建npm rebuild 卸载包npm uninstall 清除缓存npm cache clean 删除并安装依赖rm -rf node_modules &amp;&amp; npm install 查看npm的镜像npm config get registry 设置npm的镜像为淘宝镜像npm config set registry https://registry.npmmirror.com/ 设置npm的镜像为官方镜像npm config set registry http://www.npmjs.org 查看所有镜像nrm ls 所有命令加npx会使用局部命令npx webpack -v 查看全局可以更新的包npm outdated -g 修改镜像文件修改(可多个配置)npm config get userconfig 建立镜像调试npm包&lt;!-- ../my-project是自己包路径 --> &lt;!-- 创建 --> npm link ../my-project &lt;!-- 销毁 --> npm unlink ../my-project","link":"/2020/08/25/npm/"},{"title":"npm包发布配置(参考学习模板my-project)","text":"package.json 配置 { /* 组件名称 */ \"name\": \"element-zj\", /* 版本 */ \"version\": \"0.1.26\", /* 说明 */ \"description\": \"基于element二次封装\", /* 许可证 */ \"license\": \"许可证例如MIT或者BSD-2-Clause\", /* 作者信息 */ \"author\": { \"name\": \"zj\" }, /* 必须设置为false,否则发布不了npm包*/ \"private\": false, /* 组件入口 */ \"main\": \"packages/index.js\", /* 首页：可不要 */ \"homepage\": \"项目主页地址:例如http://element.eleme.io\", /* 组件bug提交地址 */ \"bugs\": { \"url\": \"项目问题跟踪地址例如https://github.com/ElemeFE/element/issues\", \"email\" : \"project@hostname.com\" }, /* npm发布配置 */ \"publishConfig\": { \"registry\": \"http://192.168.1.47:9081/repository/npm-hosted/\" } /* 自动安装依赖 */ \"peerDependencies\": { \"htdraw\": \"2.1.48\" }, /* 标记某些依赖是可选的，即使没有也可以使用 */ \"peerDependenciesMeta\": { \"vue\": { \"optional\": true }, \"echarts\": { \"optional\": true } }, /* 运行脚本 */ \"scripts\": { \"release\": \"npm publish\" }, /* 需要发布的文件 */ \"files\": [ \"packages\" ], /* 关键字提供npm搜索使用 */ \"keywords\": [ \"vue\", \"element-ui\", \"component\" ], \"dependencies\": { }, \"devDependencies\": { \"@vue/cli-service\": \"~5.0.0\", \"sass\": \"1.32.13\", \"sass-loader\": \"10.1.1\", \"vue-template-compiler\": \"^2.6.14\" } }","link":"/2022/11/27/npm%E5%8C%85%E5%8F%91%E5%B8%83%E9%85%8D%E7%BD%AE/"},{"title":"nvm包管理器常用命令","text":"安装nvm 在github上搜索nvm-windows找到nvm-setup.zip并下载安装 查看本地当前可用版本nvm list 版本切换nvm use v16.14.0 查看可用版本nvm list available nvm设置淘宝镜像nvm node_mirror https://npm.taobao.org/mirrors/node/ nvm npm_mirror https://npm.taobao.org/mirrors/npm/ 安装最新的nodenvm install latest 安装稳定版本最新的nvm install lts 卸载指定版本nodenvm uninstall 14.18.1 安装指定版本nvm install 14.18.1","link":"/2022/02/28/nvm/"},{"title":"支付回调（jquery,signalr）","text":"安装插件signalrnpm install --save signalr jquerynpm install --save jquery 使用方法单页面引入import $ from \"jquery\"; window.jQuery = $; require('signalr'); 代码监听 mounted() { var that = this var connection = $.hubConnection(signalserverapi); // signalserverapi接口地址 connection.start({ jsonp: true }).done(function() { // console.log('Now connected, connection ID=' + connection.id); }).fail(function() {console.log('Could not connect');}) this.payHubProxy = connection.createHubProxy('signalserver'); this.payHubProxy.on('HandlePayResult', function(msg) { console.log(msg) if (msg.Code === 100) { setTimeout(function() { that.closeQRPay() // 关闭弹窗 }, 1000); } else { that.$message.error('缴费失败，请稍后再试'); that.QRDialog = false } }); },","link":"/2021/03/16/payment/"},{"title":"python","text":"pyenv版本控制工具使用 安装pyenv 百度网站安装 命令使用 pyenv install 3.9.7 # 安装 Python 3.9.7 pyenv global 3.9.7 # 设置全局默认版本 pyenv local 3.8.12 # 设置当前目录的 Python 版本 pyenv versions # 查看已安装的版本 conda 下载地址 https://docs.conda.io/projects/miniconda/en/latest/ 命令使用 **# 查看所有虚拟环境及当前环境** conda info -e **# 创建新环境，指定环境名称和Python版本** conda create -n pydata python=3.8 **# 删除环境** conda remove -n pydata --all **# 进入、激活环境** conda activate py38data **# 退出环境** conda deactivate **# 在环境中安装 pandas** conda install pandas **# 在环境中安装 Jupyter Notebook** conda install -n myenv jupyter **# 使用 Conda 创建一个新的环境，安装所需的 Python 版本和其他库** conda create -n myenv python=3.8 conda activate myenv python","link":"/2025/06/13/python/"},{"title":"正则表达式","text":"正则表达式 基本用法种类 非负整数(o) /^([0]|[1-9][0-9]*)$/ 非负数 /^\\d+(.{0,1}\\d+){0,1}$/ 只能输入中文、大小写字母、数字、下划线 /^[\\u4e00-\\u9fa5A-Za-z0-9-_]*$/ 正整数(非0) /^[1-9]\\d*$/ 格式为时间格式（1:00） /^\\s*([01]?\\d|2[0-3]):?([0-5]\\d)\\s*$/ 汉字 /^[\\u4e00-\\u9fa5]{0,}$/ 正小数两位(或一位) /^(0|[1-9][0-9]*)(.[0-9]{1,2})?$/ 正小数两位(必须两位) /^(0|[1-9][0-9]*)(.[0-9]{2})?$/ 小数两位(必须两位) /^[-]?(0|[1-9][0-9]*)(.[0-9]{2})?$/ 小数两位(或一位小数) /^[-]?(0|[1-9][0-9]*)(.[0-9]{1,2})?$/","link":"/2021/09/11/regular/"},{"title":"npm基础","text":"阿杰博客 git基础$ npm list -global 查看全部模块 More info: Writing Run server $ npm update -g @vue/cli 升级vue More info: Server Generate static files$ npm into More info: Deployment","link":"/2020/12/26/test-my-site/"},{"title":"vue-Utils通用方法","text":"utils文件 第一步在vue中创建src/utils文件夹并创建util.js文件 赋值以下代码到util.js文件 var util = {} import { Dialog } from 'vant'; // 弹框提示全局注册 /** * vant弹框选择 * @param {fuction} success * @param {function} failed */ util.DialogConfirm = function (msg) { return new Promise(function (resolve, reject) { let { title = '', // 弹框标题 message = '', //弹框内容 confirmButtonText = '确定', cancelButtonText = '取消', closeOnClickOverlay = true, //是否在点击遮罩层后关闭弹窗 showConfirmButton = true, // 是否展示确认按钮 showCancelButton = true, // 是否展示取消按钮 allowHtml = true //是否支持html } = msg Dialog.confirm({ title: title, message: message, confirmButtonText: confirmButtonText, cancelButtonText: cancelButtonText, closeOnClickOverlay: closeOnClickOverlay, showConfirmButton: showConfirmButton, showCancelButton: showCancelButton, allowHtml: allowHtml }) .then((res) => { resolve(res) }) .catch((err) => { reject(err) }); }) } /** * 返回两个对象不同的部分 * @param {Object} obj1 - 旧的对象 * @param {Object} obj2 - 新的对象 */ util.difference = function (obj1, obj2) { var result = {} for (var key in obj1) { if (Object.prototype.hasOwnProperty.call(obj1, key)) { if (Object.prototype.hasOwnProperty.call(obj2, key)) { if (typeof obj1[key] == 'object') { if (JSON.stringify(obj1[key]) != JSON.stringify(obj2[key])) { result[key] = obj2[key] } } else { if (obj1[key] !== obj2[key]) { result[key] = obj2[key] } } } else { result[key] = obj1[key] } } } return result } /** * 获取随机id */ util.getGuid = function () { function S4() { return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1) } return S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4() } /** * 调用摄像头扫描二维码 * @param {fuction} success * @param {function} failed */ util.goScanQRCode = (success, failed) => { if (process.env.NODE_ENV == \"production\") { cordova.plugins.QRCodeScan.scan( function (msg) { success(msg); }, function (msg) { if (msg != \"Cancel\") { failed(msg); } } ); } } /** * 调用摄像头扫描二维码 * @param {fuction} success * @param {function} failed */ util.barcodeScanner = function () { return new Promise(function (resolve, reject) { if (process.env.NODE_ENV == \"production\") { cordova.plugins.barcodeScanner.scan( function (result) { if (!result.cancelled) { if (result.format == \"QR_CODE\") { resolve(result.text) } else { reject('Sorry, only qr codes this time') } } else { reject('The user has dismissed the scan') } }, function (error) { reject(error) } ); } }) } /** * 数组或者数组对象以及字符串去重,数组和字符串时不需传入Name * @param data是数据 * @param Name是根据什么字段去重 * @returns {Array} */ util.filterArrayObject = function (data, Name) { if (!Name) { return typeof data === 'string' ? [...new Set(data)].join('') : [...new Set(data)]; } else { let dest = null; data.forEach((element, i) => { !i ? dest.push(data[i]) : dest.filter((e) => e[Name] == data[i][Name]).length == 0 ? dest.push(data[i]) : null; }); return dest; } } /** * 大数组去除小数组 * @param removeArr * @param originalArr * @param props去重字段 * @returns {Array} */ util.handleRemoveArr = function (removeArr, originalArr, props) { if (removeArr.length &amp;&amp; originalArr.length) { for (let i = 0; i &lt; removeArr.length; i++) { for (let j = 0; j &lt; originalArr.length; j++) { if (removeArr[i][props] === originalArr[j][props]) { originalArr.splice(j, 1) } } } } } /** * 得到字符串含有某个字符的个数 str为某字符串 char为某字符 * @param str 字符串 * @param char 某字符 * @returns {Array} */ util.getCharCount = function (str, char) { const regex = new RegExp(char, 'g') const result = str.match(regex) const count = !result ? 0 : result.length return count } /** * 数据排序 * @param data是数据数组或者数据对象为数组时name不传 * @param Name是根据什么字段排序 * @param order排序方式des降序asc升序 * @returns {Array} */ util.sortData = function (data, Name, order = 'asc') { let ar = null let dest dest = Name ? data.sort((a, b) => { if (!a[Name] || !b[Name]) { ar = '排序字段不存在' return; } else { ar = null } return order === 'des' ? b[Name] - a[Name] : a[Name] - b[Name] }) : data.sort((a, b) => { return order === 'des' ? b - a : a - b }) return ar ? ar : dest; } /** * 存储sessionStorage与取值sessionStorage,清除所有 * @param key是存储名字数组或者数据对象为数组时name不传 * @param Name是存储值 * @param order存储类型localStorage或者sessionStorage * @returns {Array} */ util.setItem = function (key, value, type) { if (type === 'localStorage') { if (typeof (value) === 'string') { localStorage.setItem(key, value) } else { localStorage.setItem(key, JSON.stringify(value)) } } else { if (typeof (value) === 'string') { sessionStorage.setItem(key, value) } else { sessionStorage.setItem(key, JSON.stringify(value)) } } } util.getItem = function (key, type) { let valueJson = null if (type === 'localStorage') { if (localStorage.getItem(key)) { valueJson = localStorage.getItem(key).indexOf('{') == 0 || localStorage.getItem(key).indexOf('[') == 0 ? JSON.parse(localStorage.getItem(key)) : localStorage.getItem(key) } } else { if (sessionStorage.getItem(key)) { valueJson = sessionStorage.getItem(key).indexOf('{') == 0 || sessionStorage.getItem(key).indexOf('[') == 0 ? JSON.parse(sessionStorage.getItem(key)) : sessionStorage.getItem(key) } } return valueJson } util.clear = function (key) { if (key) { sessionStorage.removeItem(key); } else { sessionStorage.clear(); } } /** * 数字转中文数字 * @param {fuction} success * @param {function} failed */ util.numberToChinese = (num) => { let AA = new Array(\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\"); let BB = new Array(\"\", \"十\", \"百\", \"仟\", \"萬\", \"億\", \"点\", \"\"); if (num == 0) { return AA[0]; } let a = String(num).split(\".\"), k = 0, re = \"\"; for (let i = a[0].length - 1; i >= 0; i--) { switch (k) { case 0: re = BB[7] + re; break; case 4: if (!new RegExp(\"0{4}//d{\" + (a[0].length - i - 1) + \"}$\") .test(a[0])) re = BB[4] + re; break; case 8: re = BB[5] + re; BB[7] = BB[5]; k = 0; break; } if (k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0) re = AA[0] + re; if (a[0].charAt(i) != 0) re = AA[a[0].charAt(i)] + BB[k % 4] + re; k++; } if (a.length > 1) // 加上小数部分(如果有小数部分) { if (a[0] &lt; 10) { re = AA[a[0]] + BB[6]; } else { re += BB[6]; } for (let i = 0; i &lt; a[1].length; i++) re += AA[a[1].charAt(i)]; } if (re == '一十') { re = \"十\"; } if (re.match(/^一/) &amp;&amp; re.length == 3 &amp;&amp; a[0] != 1) { re = re.replace(\"一\", \"\"); } return re; } /** * String转双浮点数 */ util.getFloatStr = (num) => { if (num !== '') { num += ''; num = num.replace(/[^0-9|\\.]/g, ''); //清除字符串中的非数字非.字符 if (/^0+/) //清除字符串开头的0 num = num.replace(/^0+/, ''); if (!/\\./.test(num)) //为整数字符串在末尾添加.00 num += '.00'; if (/^\\./.test(num)) //字符以.开头时,在开头添加0 num = '0' + num; num += '00'; //在字符串末尾补零 num = num.match(/\\d+\\.\\d{2}/)[0]; } return num; }; /** * 数据转换为tree */ util.arrayTotree = (list = [], id = 'id', pid = 'pid', children = \"children\") => { const data = JSON.parse(JSON.stringify(list)) // 浅拷贝不改变源数据 const result = [] if (!Array.isArray(data)) { return result } data.forEach(item => { delete item[children] }) const map = {} data.forEach(item => { map[item[id]] = item }) data.forEach(item => { const parent = map[item[pid]] if (parent) { (parent[children] || (parent[children] = [])).push(item) } else { result.push(item) } }) return result } /** * tree转换为数组 * treeObj -数组对象树 * rootid 为根元素pid的值 */ util.treeToArray = (arr, children = 'children', pidText = 'pid', parentId = '-1', pid = 'id') => { let newArr = [] for (const i in arr) { const item = arr[i] const copyItem = JSON.parse(JSON.stringify(item)) delete copyItem[children] copyItem[pidText] = parentId newArr.push(copyItem) if (item[children] &amp;&amp; item[children].length > 0) { newArr.push(...util.treeToArray(item[children], 'children', pidText, item[pid], pid)) } } return newArr } // 深拷贝 util.deepCopy = (obj) => { // 深度复制数组 if (Object.prototype.toString.call(obj) === \"[object Array]\") { const object = []; for (let i = 0; i &lt; obj.length; i++) { if (Object.prototype.toString.call(obj[i]) === \"[object Object]\" || Object.prototype.toString.call(obj[i]) === \"[object Array]\") { object.push(util.deepCopy(obj[i])) } else { object.push(obj[i]) } } return object } // 深度复制对象 if (Object.prototype.toString.call(obj) === \"[object Object]\") { const object = new obj.constructor(); for (let p in obj) { if (Object.prototype.toString.call(obj[p]) === \"[object Object]\" || Object.prototype.toString.call(obj[p]) === \"[object Array]\") { object[p] = util.deepCopy(obj[p]); } else { object[p] = obj[p] } } return object } } /* 时间截计算 start_date开始时间 end_date结束时间 */ util.timeCut = (start_date, end_date) => { if (start_date &amp;&amp; end_date) { return new Date(start_date).getTime() - new Date(end_date).getTime() } else { return new Date(start_date).getTime() } } /* 加减乘除减少误差 测试数据 console.log( this.$Utils.addSubtractMultiplyDivide(0.1, 0.2, \"+\"), 0.1 + 0.2 ); console.log( this.$Utils.addSubtractMultiplyDivide(0.41, 0.1, \"-\"), 0.41 - 0.1 ); console.log(this.$Utils.addSubtractMultiplyDivide(7, 0.8, \"*\")); console.log( this.$Utils.addSubtractMultiplyDivide(0.06, 0.2, \"/\"), 0.06 / 0.2 ); */ util.addSubtractMultiplyDivide = (arg1, arg2, type = '+') => { let r1, r2, m = 0, a, t1 = 0, t2 = 0; if (type === '+') { try { r1 = arg1.toString().split(\".\")[1].length; } catch (e) { r1 = 0; } try { r2 = arg2.toString().split(\".\")[1].length; } catch (e) { r2 = 0; } m = Math.pow(10, Math.max(r1, r2)); a = Math.round(arg1 * m + arg2 * m) / m; return a; } else if (type === '-') { try { r1 = arg1.toString().split('.')[1].length } catch (e) { r1 = 0 } try { r2 = arg2.toString().split('.')[1].length } catch (e) { r2 = 0 } console.log(Math.max(r1, r2)); m = Math.pow(10, Math.max(r1, r2)); //动态控制精度长度 a = (r1 >= r2) ? r1 : r2; return parseFloat(((arg1 * m - arg2 * m) / m).toFixed(a)); } else if (type === '*') { r1 = arg1.toString(); r2 = arg2.toString(); try { m += r1.split(\".\")[1].length } catch (e) {} try { m += r2.split(\".\")[1].length } catch (e) {} return Number(r1.replace(\".\", \"\")) * Number(r2.replace(\".\", \"\")) / Math.pow(10, m) } else if (type === '/') { try { t1 = arg1.toString().split('.')[1].length } catch (e) {} try { t2 = arg2.toString().split('.')[1].length } catch (e) {} r1 = Number(arg1.toString().replace('.', '')) r2 = Number(arg2.toString().replace('.', '')) return (r1 / r2) * Math.pow(10, t2 - t1); } } /** * base64转文件流 */ util.base64ToFile = (dataurl, filename = \"file\") => { let arr = dataurl.split(\",\"); let mime = arr[0].match(/:(.*?);/)[1]; let suffix = mime.split(\"/\")[1]; let bstr = atob(arr[1]); let n = bstr.length; let u8arr = new Uint8Array(n); while (n--) { u8arr[n] = bstr.charCodeAt(n); } return new File([u8arr], `${filename}.${suffix}`, { type: mime, }); }, /** * 根据当天返回一周的开始和结束时间 */ util.getCurrentWeekStartTimeAndEndTime = function (time) { let startTime = ''; let endTime = ''; let current = time ? time : new Date(); // current是本周的第几天 let nowDayOfWeek = current.getDay(); if (nowDayOfWeek === 0) nowDayOfWeek = 7; let dayNum = 1 * 24 * 60 * 60 * 1000; // 获取本周星期一的时间，星期一作为一周的第一天 let firstDate = new Date( current.valueOf() - (nowDayOfWeek - 1) * dayNum ); // 获取本周星期天的时间，星期天作为一周的最后一天 let lastDate = new Date(new Date(firstDate).valueOf() + 6 * dayNum); startTime = (new Date(firstDate).getMonth() + 1 >= 0 &amp;&amp; new Date(firstDate).getMonth() + 1 &lt;= 9 ? \"0\" + (new Date(firstDate).getMonth() + 1) : new Date(firstDate).getMonth() + 1) + \"/\" + (new Date(firstDate).getDate() &lt;= 9 ? \"0\" + new Date(firstDate).getDate() : new Date(firstDate).getDate()); endTime = (new Date(lastDate).getMonth() + 1 &lt;= 9 ? \"0\" + (new Date(lastDate).getMonth() + 1) : new Date(lastDate).getMonth() + 1) + \"/\" + (new Date(lastDate).getDate() &lt;= 9 ? \"0\" + new Date(lastDate).getDate() : new Date(lastDate).getDate()); return [startTime, endTime]; } export default util 在main.js中添加 import Utils from '@/utils/util.js'; // 方法 Vue.prototype.$Utils = Utils;","link":"/2021/12/08/utils/"},{"title":"vite插件案例","text":"tailwindcss版本4.0使用(vite项目)安装依赖npm i -D tailwindcss @tailwindcss/vite 配置 Vite 插件import tailwindcss from '@tailwindcss/vite' export default defineConfig({ plugins: [ tailwindcss(), ], }) 创建一个tailwind.css文件@layer theme, base, components, utilities; @import &quot;tailwindcss/theme.css&quot; layer(theme); @import &quot;tailwindcss/utilities.css&quot; layer(utilities); @custom-variant dark (&amp;:is(.dark *)); @theme { --color-bg_color: var(--el-bg-color); --color-primary: var(--el-color-primary); --color-text_color_primary: var(--el-text-color-primary); --color-text_color_regular: var(--el-text-color-regular); } /* The default border color has changed to `currentColor` in Tailwind CSS v4, so we've added these compatibility styles to make sure everything still looks the same as it did with Tailwind CSS v3. If we ever want to remove these styles, we need to add an explicit border color utility to any element that depends on these defaults. */ @layer base { *, ::after, ::before, ::backdrop, ::file-selector-button { border-color: var(--color-gray-200, currentColor); } } @utility flex-c { @apply flex justify-center items-center; } @utility flex-ac { @apply flex justify-around items-center; } @utility flex-bc { @apply flex justify-between items-center; } @utility navbar-bg-hover { @apply dark:text-white dark:hover:bg-[#242424]!; } main.ts引入使用/* 一定要在main.ts中导入tailwind.css，防止vite每次hmr都会请求src/style/index.scss整体css文件导致热更新慢的问题 */ import &quot;./style/tailwind.css&quot;; 使用案例 &lt;div class=\"w-32 h-32 bg-blue-500 dark:bg-green-500\">&lt;/div> tailwindcss版本3.0使用(vite项目)安装依赖npm i -D tailwindcss postcss autoprefixer 项目根目录执行 npx tailwindcss init -p 执行命令后会多出两个文件 tailwind.config.js export default { &lt;!-- 作用: 这个配置选项定义了如何启用暗模式。\"class\" 表示你可以通过添加一个特定的类（通常是 dark）到 HTML 元素上来启用暗模式。例如，在 HTML 或根元素上添加 class=\"dark\"，Tailwind 将应用暗模式相关的样式。另一种选项是 \"media\"，它基于用户的系统主题设置自动启用暗模式。 --> darkMode: \"class\", &lt;!-- Tailwind 将不会应用默认的 CSS 重置规则 --> corePlugins: { preflight: false }, &lt;!-- 应该扫描哪些文件来生成所需的 CSS 类 --> content: [\"./index.html\", \"./src/**/*.{vue,js,ts,jsx,tsx}\"], theme: { extend: { colors: { &lt;!-- 自定义背景颜色 --> bg_color: \"var(--el-bg-color)\", primary: \"var(--el-color-primary)\", text_color_primary: \"var(--el-text-color-primary)\", text_color_regular: \"var(--el-text-color-regular)\" } } } }; postcss.config.js代码添加如下 export default { plugins: { /* 允许你在 CSS 文件中使用 @import 语法来引入其他 CSS 文件 */ \"postcss-import\": {}, /* Tailwind CSS 的一部分，用于支持嵌套 CSS 规则 */ \"tailwindcss/nesting\": {}, /* 用于生成 Tailwind CSS 的实用类 */ tailwindcss: {}, /* 自动为你的 CSS 添加浏览器前缀 */ autoprefixer: { overrideBrowserslist: [ \"Android 4.1\", \"iOS 7.1\", \"Chrome > 31\", \"ff > 31\", \"ie >= 8\", \"last 10 versions\" // 所有主流浏览器最近2个版本 ] }, /* 生产环境，cssnano 插件将被启用 */ ...(process.env.NODE_ENV === \"production\" ? { cssnano: {} } : {}) } }; 使用案例 &lt;div class=\"w-32 h-32 bg-blue-500 dark:bg-green-500\">&lt;/div> svg插件使用安装依赖npm i -D vite-svg-loader 在vite.config.ts中的plugins里配置import svgLoader from \"vite-svg-loader\"; plugins:[svgLoader()] 使用案例import avatar from \"@/assets/login/avatar.svg?component\"; &lt;avatar /> &lt;component :is=\"toRaw2(avatar)\" /> mock支持安装依赖npm i vite-plugin-fake-server -D 在vite.config.ts中的plugins里配置import { vitePluginFakeServer } from \"vite-plugin-fake-server\"; plugins:[ vitePluginFakeServer({ logger: false, include: \"mock\", infixName: false, enableProd: true }) ] 然后在项目根目录下创建mock文件夹 代码如下已登录接口为例子新建login.ts import { defineFakeRoute } from \"vite-plugin-fake-server/client\"; export default defineFakeRoute([ { url: \"/login\", method: \"post\", response: ({ body }) => { if (body.username === \"admin\") { return { success: true, data: { avatar: \"https://avatars.githubusercontent.com/u/44761321\", username: \"admin\", nickname: \"小铭\", // 一个用户可能有多个角色 roles: [\"admin\"], accessToken: \"eyJhbGciOiJIUzUxMiJ9.admin\", refreshToken: \"eyJhbGciOiJIUzUxMiJ9.adminRefresh\", expires: \"2030/10/30 00:00:00\" } }; } else { return { success: true, data: { avatar: \"https://avatars.githubusercontent.com/u/52823142\", username: \"common\", nickname: \"小林\", roles: [\"common\"], accessToken: \"eyJhbGciOiJIUzUxMiJ9.common\", refreshToken: \"eyJhbGciOiJIUzUxMiJ9.commonRefresh\", expires: \"2030/10/30 00:00:00\" } }; } } } ]); eslint代码和prettier格式化检查安装依赖npm i eslint @eslint/js eslint-config-prettier eslint-define-config eslint-plugin-prettier eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser -D 在项目根目录下创建eslint.config.js代码如下import { defineFlatConfig } from \"eslint-define-config\"; /* eslint模块配置 */ import js from \"@eslint/js\"; /* Vue.js 相关的 ESLint */ import pluginVue from \"eslint-plugin-vue\"; /* 用于解析 Vue 文件的 ESLint 解析器 */ import * as parserVue from \"vue-eslint-parser\"; /* 分别导入与 Prettier 集成的 ESLint 配置和插件。 */ import configPrettier from \"eslint-config-prettier\"; import pluginPrettier from \"eslint-plugin-prettier\"; /* 分别导入用于 TypeScript 文件的 ESLint 解析器和相关插件 */ import * as parserTypeScript from \"@typescript-eslint/parser\"; import pluginTypeScript from \"@typescript-eslint/eslint-plugin\"; export default defineFlatConfig([ /* 所有文件 */ { /* 基于 JavaScript 的推荐配置，设置了一些特定文件和全局变量的忽略规则，以及集成了 Prettier 插件的规则 */ ...js.configs.recommended, /* 指定需要忽略的文件和路径模式 */ ignores: [ \"**/.*\", \"dist/*\", \"*.d.ts\", \"public/*\", \"src/assets/**\", \"src/**/iconfont/**\" ], /* 指定了一些全局变量，并将它们标记为只读 */ languageOptions: { globals: { RefType: \"readonly\", EmitType: \"readonly\", TargetContext: \"readonly\", ComponentRef: \"readonly\", ElRef: \"readonly\", ForDataType: \"readonly\", AnyFunction: \"readonly\", PropType: \"readonly\", Writable: \"readonly\", Nullable: \"readonly\", NonNullable: \"readonly\", Recordable: \"readonly\", ReadonlyRecordable: \"readonly\", Indexable: \"readonly\", DeepPartial: \"readonly\", Without: \"readonly\", Exclusive: \"readonly\", TimeoutHandle: \"readonly\", IntervalHandle: \"readonly\", Effect: \"readonly\", ChangeEvent: \"readonly\", WheelEvent: \"readonly\", ImportMetaEnv: \"readonly\", Fn: \"readonly\", PromiseFn: \"readonly\", ComponentElRef: \"readonly\", parseInt: \"readonly\", parseFloat: \"readonly\" } }, /* 启用了 Prettier 插件 */ plugins: { prettier: pluginPrettier }, /* 其中包括了 Prettier 的规则以及其他特定的 ESLint 规则 */ rules: { ...configPrettier.rules, ...pluginPrettier.configs.recommended.rules, \"no-unused-vars\": [ \"error\", { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" } ], \"prettier/prettier\": [ \"error\", { endOfLine: \"auto\" } ] } }, /* 针对.vue文件规则 */ { files: [\"**/*.vue\"], languageOptions: { globals: { $: \"readonly\", $$: \"readonly\", $computed: \"readonly\", $customRef: \"readonly\", $ref: \"readonly\", $shallowRef: \"readonly\", $toRef: \"readonly\" }, parser: parserVue, parserOptions: { ecmaFeatures: { jsx: true }, extraFileExtensions: [\".vue\"], parser: \"@typescript-eslint/parser\", sourceType: \"module\" } }, plugins: { vue: pluginVue }, processor: pluginVue.processors[\".vue\"], rules: { ...pluginVue.configs.base.rules, ...pluginVue.configs[\"vue3-essential\"].rules, ...pluginVue.configs[\"vue3-recommended\"].rules, \"no-undef\": \"off\", \"no-unused-vars\": \"off\", \"vue/no-v-html\": \"off\", \"vue/require-default-prop\": \"off\", \"vue/require-explicit-emits\": \"off\", \"vue/multi-word-component-names\": \"off\", \"vue/no-setup-props-reactivity-loss\": \"off\", \"vue/html-self-closing\": [ \"error\", { html: { void: \"always\", normal: \"always\", component: \"always\" }, svg: \"always\", math: \"always\" } ] } }, /* TypeScript 文件的配置 */ { files: [\"**/*.?([cm])ts\", \"**/*.?([cm])tsx\"], languageOptions: { parser: parserTypeScript, parserOptions: { sourceType: \"module\" } }, plugins: { \"@typescript-eslint\": pluginTypeScript }, rules: { ...pluginTypeScript.configs.strict.rules, \"@typescript-eslint/no-unused-expressions\": \"off\", \"@typescript-eslint/no-this-alias\": \"off\", \"@typescript-eslint/ban-types\": \"off\", \"@typescript-eslint/no-redeclare\": \"error\", \"@typescript-eslint/ban-ts-comment\": \"off\", \"@typescript-eslint/no-explicit-any\": \"off\", \"@typescript-eslint/prefer-as-const\": \"warn\", \"@typescript-eslint/no-empty-function\": \"off\", \"@typescript-eslint/no-non-null-assertion\": \"off\", \"@typescript-eslint/no-import-type-side-effects\": \"error\", \"@typescript-eslint/explicit-module-boundary-types\": \"off\", \"@typescript-eslint/consistent-type-imports\": [ \"error\", { disallowTypeAnnotations: false, fixStyle: \"inline-type-imports\" } ], \"@typescript-eslint/prefer-literal-enum-member\": [ \"error\", { allowBitwiseExpressions: true } ], \"@typescript-eslint/no-unused-vars\": [ \"error\", { argsIgnorePattern: \"^_\", varsIgnorePattern: \"^_\" } ] } }, /* 针对.d.ts文件规则 */ { files: [\"**/*.d.ts\"], rules: { \"eslint-comments/no-unlimited-disable\": \"off\", \"import/no-duplicates\": \"off\", \"unused-imports/no-unused-vars\": \"off\" } }, /* 针对.js文件规则 */ { files: [\"**/*.?([cm])js\"], rules: { \"@typescript-eslint/no-require-imports\": \"off\", \"@typescript-eslint/no-var-requires\": \"off\" } } ]); 使用在package.json添加命令 \"scripts\":{ \"lint:eslint\": \"eslint --cache --max-warnings 0 \\\"{src,mock,build}/**/*.{vue,js,ts,tsx}\\\" --fix\", \"lint:prettier\": \"prettier --write \\\"**/*.{js,ts,json,tsx,css,scss,vue,html,md}\\\"\", } stylelint代码样式检查安装依赖npm i stylelint stylelint-config-recess-order stylelint-config-recommended-vue stylelint-config-standard-scss stylelint-prettier -D 在项目根目录下创建stylelint.config.js代码如下export default { extends: [ \"stylelint-config-standard\", \"stylelint-config-html/vue\", \"stylelint-config-recess-order\" ], plugins: [\"stylelint-scss\", \"stylelint-order\", \"stylelint-prettier\"], overrides: [ { files: [\"**/*.(css|html|vue)\"], customSyntax: \"postcss-html\" }, { files: [\"*.scss\", \"**/*.scss\"], customSyntax: \"postcss-scss\", extends: [ \"stylelint-config-standard-scss\", \"stylelint-config-recommended-vue/scss\" ] } ], rules: { \"prettier/prettier\": true, \"selector-class-pattern\": null, \"no-descending-specificity\": null, \"scss/dollar-variable-pattern\": null, \"selector-pseudo-class-no-unknown\": [ true, { ignorePseudoClasses: [\"deep\", \"global\"] } ], \"selector-pseudo-element-no-unknown\": [ true, { ignorePseudoElements: [\"v-deep\", \"v-global\", \"v-slotted\"] } ], \"at-rule-no-unknown\": [ true, { ignoreAtRules: [ \"tailwind\", \"apply\", \"variants\", \"responsive\", \"screen\", \"function\", \"if\", \"each\", \"include\", \"mixin\", \"use\" ] } ], \"rule-empty-line-before\": [ \"always\", { ignore: [\"after-comment\", \"first-nested\"] } ], \"unit-no-unknown\": [true, { ignoreUnits: [\"rpx\"] }], \"order/order\": [ [ \"dollar-variables\", \"custom-properties\", \"at-rules\", \"declarations\", { type: \"at-rule\", name: \"supports\" }, { type: \"at-rule\", name: \"media\" }, \"rules\" ], { severity: \"warning\" } ] }, ignoreFiles: [\"**/*.js\", \"**/*.ts\", \"**/*.jsx\", \"**/*.tsx\", \"report.html\",\"dist/**/*\",\"public/**/*\"] }; 使用在package.json添加命令 \"scripts\":{ \"lint:stylelint\": \"stylelint --cache --fix \\\"**/*.{html,vue,css,scss}\\\" --cache-location node_modules/.cache/stylelint/\" } css代码压缩优化打包体积安装依赖npm install postcss --save-dev 一些常见插件（使用这些需要npm安装）一些常用的插件与作用autoprefixer：自动添加 CSS3 前缀。cssnano：优化和压缩 CSS。postcss-import：通过 @import 导入 CSS 文件。postcss-custom-properties：使用自定义属性，类似于 Sass 中的变量。postcss-nested：允许使用嵌套规则。postcss-mixins：类似于 Sass 中的 mixin。postcss-css-variables：支持 CSS 变量。postcss-preset-env：使用最新的 CSS 语法，自动添加前缀，按需加载 polyfill。postcss-normalize：添加浏览器默认样式的规则，以消除浏览器之间的差异。postcss-pxtorem：将像素值转换成 rem 值，使得页面更好地适配不同大小的设备。postcss-extend：类似于 Sass 中的 @extend。postcss-flexbugs-fixes：修复 Flexbox 布局的一些 bug。 ### 在项目跟目录新建postcss.config.js 1. 代码如下 ```js export default { plugins: { /* 允许你在 CSS 文件中使用 @import 语法来引入其他 CSS 文件 */ &quot;postcss-import&quot;: {}, /* Tailwind CSS 的一部分，用于支持嵌套 CSS 规则 */ &quot;tailwindcss/nesting&quot;: {}, /* 用于生成 Tailwind CSS 的实用类 */ tailwindcss: {}, /* 自动为你的 CSS 添加浏览器前缀 */ autoprefixer: { overrideBrowserslist: [ &quot;Android 4.1&quot;, &quot;iOS 7.1&quot;, &quot;Chrome &gt; 31&quot;, &quot;ff &gt; 31&quot;, &quot;ie &gt;= 8&quot;, &quot;last 10 versions&quot; // 所有主流浏览器最近2个版本 ] }, /* 生产环境，cssnano 插件将被启用:使用默认的配置 */ ...(process.env.NODE_ENV === &quot;production&quot; ? { cssnano: { preset: &quot;default&quot; } } : {}), 'postcss-pxtorem': { rootValue: 37.5, /* 平板13.5 app37.5 */ unitPrecision: 10, /* 最小精度，小数点位数 */ propList: ['*'], /* 匹配属性 *代表所有 */ minPixelValue: 1, /* 计算的最小像素值1px */ }, } }; @wcjiang/notify使用(浏览器消息提醒)安装依赖npm i @wcjiang/notify -D 使用import Notify from \"@wcjiang/notify\"; const notify = new Notify({ message: \"There is message.\", // page title. effect: \"flash\", audio: { file: [\"msg.mp4\"] }, disableFavicon: true, interval: 1000 }); notify.player(); notify.setTitle(true); // Play animation notify.setTitle(\"有新消息，请注意查收！\"); // Flashing new title setTimeout(() => { notify.clearTimer(); }, 2000); 更多配置请查看官网官网","link":"/2020/12/25/vite%E6%8F%92%E4%BB%B6%E6%A1%88%E4%BE%8B/"},{"title":"快捷键","text":"{ \"addSubtractMultiplyDivide\": { \"prefix\": \"addSubtractMultiplyDivide\", \"body\": [ \"this.$$Utils.addSubtractMultiplyDivide(7, 0.8, \\\"*\\\")\" ], \"description\": \"加减乘除减少误差\" }, \"filterArrayObject\": { \"prefix\": \"filterArrayObject\", \"body\": [ \"this.$$Utils.filterArrayObject([1, 2, 3, 1],'name')\" ], \"description\": \"数组或者数组对象以及字符串去重,数组和字符串时不需传入Name\" }, \"sortData\": { \"prefix\": \"sortData\", \"body\": [ \"this.$$Utils.sortData([{ name: \\\"7\\\" }, { name: \\\"2\\\" }], \\\"name\\\", \\\"des\\\")\" ], \"description\": \"数组或者数组对象排序，name为排序字段，为数组时可传入为null\" }, \"getItem\": { \"prefix\": \"getItem\", \"body\": [ \"this.$$Utils.getItem(\\\"key\\\", \\\"localStorage\\\")\" ], \"description\": \"获取设置的值，第二个入参判断是哪个类型\" }, \"setItem\": { \"prefix\": \"setItem\", \"body\": [ \"this.$$Utils.setItem(\\\"key\\\", \\\"value\\\", \\\"localStorage\\\")\" ], \"description\": \"设置localStorage和sessionStorage，第三个入参判断是哪个类型\" }, \"numberToChinese\": { \"prefix\": \"numberToChinese\", \"body\": [ \"this.$$Utils.numberToChinese(0)\" ], \"description\": \"数字转中文数字\" }, \"getCurrentWeekStartTimeAndEndTime\": { \"prefix\": \"getCurrentWeekStartTimeAndEndTime\", \"body\": [ \"this.$$Utils.getCurrentWeekStartTimeAndEndTime()\" ], \"description\": \"根据当天返回一周的开始和结束时间,也可以自己传入时间\" }, \"base64ToFile\": { \"prefix\": \"base64ToFile\", \"body\": [ \"this.$$Utils.base64ToFile(\\\"base64\\\", \\\"filename\\\")\" ], \"description\": \"base64转文件流\" }, \"timeCut\": { \"prefix\": \"timeCut\", \"body\": [ \"this.$$Utils.timeCut(\\\"2022-04-08 09:35:18\\\", \\\"2022-04-08 09:35:17\\\")\" ], \"description\": \"时间截计算,一个参数时为时间截，两个参数时计算两者相差的时间截\" }, \"deepCopy\": { \"prefix\": \"deepCopy\", \"body\": [ \"this.$$Utils.deepCopy(\\\"数据\\\");\" ], \"description\": \"深拷贝\" }, \"treeToArray\": { \"prefix\": \"treeToArray\", \"body\": [ \"this.$$Utils.treeToArray(\", \" [\", \" {\", \" id: \\\"0\\\",\", \" name: \\\"0\\\",\", \" children: [\", \" {\", \" id: \\\"1\\\",\", \" name: \\\"2\\\",\", \" children: [\", \" {\", \" id: \\\"1-1\\\",\", \" name: \\\"anc\\\",\", \" children: [\", \" {\", \" id: \\\"1-1-1\\\",\", \" name: \\\"anc\\\",\", \" },\", \" ],\", \" },\", \" ],\", \" },\", \" ],\", \" },\", \" ],\", \" \\\"children\\\",\", \" \\\"pid\\\",\", \" \\\"-1\\\",\", \" \\\"id\\\"\", \")\" ], \"description\": \"树数据转为数组\" }, \"DxColumn\": { \"prefix\": \"DxColumn\", \"body\": [ \"&lt;DxColumn\", \" data-field=\\\"jobCode\\\"\", \" caption=\\\"任务编号\\\"\", \" data-type=\\\"string\\\"\", \"/>\" ], \"description\": \"表格头\" }, \"DxColumnTemplate\": { \"prefix\": \"dxColumnTemplate\", \"body\": [ \"&lt;DxColumn caption=\\\"是否锁定\\\" cell-template=\\\"release\\\" />\", \"&lt;template #release=\\\"{ data }\\\">\", \" {{ data.data.release ? \\\"是\\\" : \\\"否\\\" }}\", \"&lt;/template>\" ], \"description\": \"自定义表格头\" }, \"require\": { \"prefix\": \"\", \"body\": [ \"require('path')\" ], \"description\": \"require\" }, \"watch\": { \"prefix\": \"watch\", \"body\": [ \"watch: {\", \" dataform: {\", \" handler(data) {\", \" console.log(data);\", \" },\", \" deep: true,\", \" immediate: true,\", \" },\", \" },\" ], \"description\": \"watch\" }, \"ev-button\": { \"prefix\": \"ev-button\", \"body\": [ \"&lt;ev-button text=\\\"查看\\\" type=\\\"default\\\" @click=\\\"showPic\\\" />\" ], \"description\": \"ev-button\" }, \"saveObjects\": { \"prefix\": \"saveObjects\", \"body\": [ \"self\", \" .$$server()\", \" .saveObjects(\", \" \\\"resourceName\\\",\", \" \\\"insertObjects\\\",\", \" \\\"updateObjects\\\",\", \" \\\"deleteObjects\\\",\", \" false\", \" )\", \" .then(function () {\", \" self.$$notify(\\\"操作成功\\\", \\\"success\\\");\", \" })\", \" .catch(function (err) {\", \" self.$$notify(err.msg ? err.msg : err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"批量处理\" }, \"getSelectedRowsData\": { \"prefix\": \"getSelectedRowsData\", \"body\": [ \"const self = this;\", \"let items = self.$$refs.table.instance.getSelectedRowsData();\" ], \"description\": \"获取表格选中部分\" }, \"confirm\": { \"prefix\": \"confirm\", \"body\": [ \"confirm(\\\"是否覆盖?\\\", \\\"提示\\\").then((dialogResult) => {\", \" if (dialogResult) {\", \" } else {\", \" }\", \"});\" ], \"description\": \"弹框提示\" }, \"add\": { \"prefix\": \"add\", \"body\": [ \"self\", \" .$$server()\", \" .add(\\\"resourceName\\\", \\\"condition\\\", false)\", \" .then((res) => {\", \" console.log(res);\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.msg ? err.msg : err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"post请求\" }, \"custom\": { \"prefix\": \"custom\", \"body\": [ \"const self = this;\", \"self\", \" .$$server()\", \" .custom(\\\"resourceName\\\", \\\"methodName\\\", \\\"condition\\\", false)\", \" .then((res) => {\", \" console.log(res);\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.msg ? err.msg : err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"自定义post请求\" }, \"query\": { \"prefix\": \"query\", \"body\": [ \"const self = this;\", \"self\", \" .$$server()\", \" .query(\", \" \\\"resourceName\\\",\", \" {\", \" pageIndex: self.pageIndex + 1,\", \" pageSize: self.pageSize,\", \" },\", \" \\\"condition\\\",\", \" \\\"orderBy\\\"\", \" )\", \" .then((res) => {\", \" console.log(res);\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.msg ? err.msg : err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"列表get请求\" }, \"getObject\": { \"prefix\": \"getObject\", \"body\": [ \"const self = this;\", \"self\", \" .$$server()\", \" .getObject(\\\"resourceName\\\", \\\"id\\\", false)\", \" .then((res) => {\", \" console.log(res);\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.msg ? err.msg : err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"资源获取get请求\" }, \"exportExcel\": { \"prefix\": \"exportExcel\", \"body\": [ \"let condition = {\", \" searchKey: this.searchKey,\", \"};\", \"this.$$server().exportExcel(\\\"Warehouse\\\", {}, condition);\" ], \"description\": \"导出\" }, \"importDetail\": { \"prefix\": \"importDetail\", \"body\": [ \"const self = this;\", \"self\", \" .$$showDialog(\", \" \\\"导入\\\",\", \" importDetail,\", \" {\", \" name: \\\"接口名\\\",\", \" },\", \" {\", \" width: \\\"600px\\\",\", \" height: \\\"500px\\\",\", \" }\", \" )\", \" .then(() => {\", \" self.pageIndex = 0;\", \" self.$$refs.table.instance.refresh();\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.data.msg, \\\"error\\\");\", \" });\" ], \"description\": \"导入\" }, \"showDialog\": { \"prefix\": \"showDialog\", \"body\": [ \"const self = this;\", \"self\", \" .$$showDialog(\", \" \\\"编辑\\\",\", \" \\\"文件引入\\\",\", \" { item: \\\"item\\\" },\", \" {\", \" width: \\\"900px\\\",\", \" height: \\\"500px\\\",\", \" }\", \" )\", \" .then(() => {\", \" self.$$refs.table.instance.refresh();\", \" });\" ], \"description\": \"页面弹框\" }, \"generalGridPage\": { \"prefix\": \"generalGridPage\", \"body\": [ \"&lt;template>\", \" &lt;div class=\\\"container\\\">\", \" &lt;ListPage>\", \" &lt;template #headLeft>\", \" &lt;SearchCondition\", \" :condition=\\\"condition\\\"\", \" :searchConditionConfigure=\\\"searchConditionConfigure\\\"\", \" @searchData=\\\"searchData\\\"\", \" />\", \" &lt;/template>\", \" &lt;template #headRight>\", \" &lt;ev-button\", \" icon=\\\"iconfont iconicon-test\\\"\", \" text=\\\"添加\\\"\", \" type=\\\"default\\\"\", \" @click=\\\"addData('示例')\\\"\", \" class=\\\"space\\\"\", \" />\", \" &lt;ev-button\", \" icon=\\\"iconfont iconimport\\\"\", \" text=\\\"导入\\\"\", \" type=\\\"default\\\"\", \" @click=\\\"importData\\\"\", \" class=\\\"space\\\"\", \" />\", \" &lt;ev-button\", \" icon=\\\"iconfont icondaochu\\\"\", \" text=\\\"导出\\\"\", \" type=\\\"default\\\"\", \" @click=\\\"exportData\\\"\", \" />\", \" &lt;/template>\", \" &lt;template #content>\", \" &lt;DxDataGrid\", \" ref=\\\"table\\\"\", \" :data-source=\\\"dataSource\\\"\", \" :show-borders=\\\"true\\\"\", \" :row-alternation-enabled=\\\"true\\\"\", \" :allow-column-resizing=\\\"true\\\"\", \" :column-auto-width=\\\"true\\\"\", \" :remote-operations=\\\"true\\\"\", \" :cache-enabled=\\\"false\\\"\", \" :load-panel=\\\"{ enabled: false }\\\"\", \" :selection=\\\"{ mode: 'multiple', selectAllMode: 'page' }\\\"\", \" >\", \" &lt;DxPaging\", \" :page-index.sync=\\\"pageIndex\\\"\", \" :page-size.sync=\\\"pageSize\\\"\", \" :visible=\\\"true\\\"\", \" />\", \" &lt;DxPager\", \" :show-page-size-selector=\\\"true\\\"\", \" :allowed-page-sizes=\\\"[]\\\"\", \" :show-navigation-buttons=\\\"true\\\"\", \" :visible=\\\"true\\\"\", \" :show-info=\\\"true\\\"\", \" />\", \" &lt;DxColumn\", \" v-for=\\\"(itme, index) in dataGridColumnConfigure\\\"\", \" :key=\\\"index\\\"\", \" :caption=\\\"itme.caption\\\"\", \" :data-field=\\\"itme.field\\\"\", \" data-type=\\\"string\\\"\", \" :width=\\\"itme.width\\\"\", \" />\", \" &lt;DxColumn caption=\\\"操作\\\" cell-template=\\\"operation\\\" />\", \" &lt;template #operation=\\\"{ data }\\\">\", \" &lt;div>\", \" &lt;ev-button\", \" text=\\\"编辑\\\"\", \" icon=\\\"edit\\\"\", \" hint=\\\"编辑\\\"\", \" class=\\\"mini\\\"\", \" styling-mode=\\\"text\\\"\", \" type=\\\"default\\\"\", \" @click=\\\"editData('示例', data.data.id)\\\"\", \" />\", \" &lt;ev-button\", \" text=\\\"删除\\\"\", \" icon=\\\"clearsquare\\\"\", \" hint=\\\"删除\\\"\", \" class=\\\"mini\\\"\", \" styling-mode=\\\"text\\\"\", \" type=\\\"danger\\\"\", \" @click=\\\"removeData(data.data.id)\\\"\", \" />\", \" &lt;/div>\", \" &lt;/template>\", \" &lt;/DxDataGrid>\", \" &lt;/template>\", \" &lt;/ListPage>\", \" &lt;/div>\", \"&lt;/template>\", \"\", \"&lt;script>\", \"import { DxPager } from \\\"devextreme-vue/data-grid\\\";\", \"import ListPage from \\\"@/components/listPage/index.vue\\\";\", \"import { generalGridPageMixin } from \\\"@/components/generalGridPage/mixin.js\\\";\", \"import SearchCondition from \\\"@/components/generalGridPage/searchCondition.vue\\\";\", \"import detail from \\\"./detail.vue\\\";\", \"\", \"export default {\", \" name: \\\"\\\",\", \" components: { DxPager, ListPage, SearchCondition },\", \" mixins: [generalGridPageMixin],\", \" data() {\", \" return {\", \" requestPath: \\\"Model\\\",\", \" detail,\", \" crumbs: [\", \" { name: \\\"基础数据管理\\\", url: \\\"\\\" },\", \" { name: \\\"常规网格示例\\\", url: \\\"\\\" },\", \" ],\", \" dataGridColumnConfigure: [\", \" { caption: \\\"#\\\", field: \\\"index\\\" },\", \" { caption: \\\"模具编号\\\", field: \\\"code\\\" },\", \" { caption: \\\"模具名称\\\", field: \\\"modelName\\\" },\", \" { caption: \\\"型号\\\", field: \\\"modelType\\\" },\", \" { caption: \\\"模具类型\\\", field: \\\"modelClassificationDesc\\\" },\", \" ],\", \" searchConditionConfigure: [\", \" {\", \" type: \\\"DxTextBox\\\",\", \" label: \\\"输入查询\\\",\", \" key: \\\"searchKey\\\",\", \" placeholder: \\\"模具编号\\\",\", \" },\", \" {\", \" type: \\\"DxTextBox\\\",\", \" label: \\\"模具名称\\\",\", \" key: \\\"name\\\",\", \" width: 250,\", \" },\", \" {\", \" type: \\\"DxSelectBox\\\",\", \" label: \\\"状态\\\",\", \" key: \\\"status\\\",\", \" items: [{ text: \\\"测试\\\", value: \\\"1\\\" }],\", \" },\", \" {\", \" type: \\\"DxTagBox\\\",\", \" label: \\\"多选状态\\\",\", \" key: \\\"statusList\\\",\", \" items: [{ text: \\\"测试\\\", value: \\\"1\\\" }],\", \" },\", \" {\", \" type: \\\"DxDateBox\\\",\", \" label: \\\"日期\\\",\", \" key: \\\"time\\\",\", \" },\", \" {\", \" type: \\\"DxDateBoxSection\\\",\", \" label: \\\"日期段\\\",\", \" key1: \\\"startTime\\\",\", \" key2: \\\"endTime\\\",\", \" placeholder1: \\\"开始\\\",\", \" placeholder2: \\\"结束\\\",\", \" },\", \" ],\", \" // 下拉框条件源\", \" statusList: [],\", \" };\", \" },\", \" created() {\", \" this.getStatusList();\", \" this.loadData();\", \" },\", \" methods: {\", \" // 加载状态列表\", \" getStatusList() {\", \" const self = this;\", \" const condition = { typeValue: \\\"model_status\\\" };\", \" self\", \" .$$server()\", \" .query(\\\"DataDict\\\", {}, condition)\", \" .then((res) => {\", \" self.statusList = res.rows;\", \" self.searchConditionConfigure[2].items = self.statusList;\", \" self.searchConditionConfigure[3].items = self.statusList;\", \" })\", \" .catch((err) => {\", \" self.$$notify(err.data.msg, \\\"error\\\");\", \" });\", \" },\", \" },\", \"};\", \"&lt;/script>\", \"&lt;style lang=\\\"scss\\\" scoped>&lt;/style>\", \"\" ], \"description\": \"页面布局\" } }","link":"/2021/12/08/vscode/"},{"title":"vueApi使用","text":"@vue/cli(vue3.0脚手架安装)npm install -g @vue/cli vue 创建项目 vue 2.0 vue init webpack vuedemo01 vue 3.0 vue create vuedemo01 获取路由query信息(url值) 通过query传值this.$router.push({ name: \"business-\" + pageFlow[i + 1], query: { businessid: this.businessid, }, }); // 获取值 this.$route.query 通过params传值// 获取值 this.$route.params ajaxajax(BindInfoBool,{},'get').then((res) => { console.log(res.Code); if(res.Code==100){ console.log(res.Code); } }) 身份证验证器var isCardId = (rule, value, callback) => { var city = { 11: \"北京\", 12: \"天津\", 13: \"河北\", 14: \"山西\", 15: \"内蒙古\", 21: \"辽宁\", 22: \"吉林\", 23: \"黑龙江 \", 31: \"上海\", 32: \"江苏\", 33: \"浙江\", 34: \"安徽\", 35: \"福建\", 36: \"江西\", 37: \"山东\", 41: \"河南\", 42: \"湖北 \", 43: \"湖南\", 44: \"广东\", 45: \"广西\", 46: \"海南\", 50: \"重庆\", 51: \"四川\", 52: \"贵州\", 53: \"云南\", 54: \"西藏 \", 61: \"陕西\", 62: \"甘肃\", 63: \"青海\", 64: \"宁夏\", 65: \"新疆\", 71: \"台湾\", 81: \"香港\", 82: \"澳门\", 91: \"国外 \" }; const reg = /^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[0-2])(([0-2][1-9])|10|20|30|31)\\d{3}(\\d|X|x)$/; if (!value) { callback(new Error(\"请输入身份证号\")); }else if(!city[value.substr(0, 2)]){ callback(new Error(\"地址编码错误\")); }else if(!reg.test(value)){ callback(new Error(\"输入正确的身份证格式\")); }else{ if (value.length === 18) { value = value.split('') var factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2] var parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2] var sum = 0 var ai = 0 var wi = 0 for (var i = 0; i &lt; 17; i++) { ai = value[i] wi = factor[i] sum += ai * wi } var last = parity[sum % 11]; if (parity[sum % 11] != value[17]) { callback(new Error(\"校验位错误\")); } } } }; rules: { CardNum: [{validator: isCardId, trigger: 'blur'}], }, 状态管理vuex mutations的调用mutations: { // 搜索头列表设置 setSearch (state, active) { state.searchlist = active } } 调用方法(第一个参数为路径，第二个传参) this.$store.commit('d2admin/headerList/setSearch', 参数) actions的调用actions: { async asideCollapseSet ({ state, dispatch }, collapse) { // store 赋值 state.asideCollapse = collapse // 持久化 await dispatch('d2admin/db/set', { dbName: 'sys', path: 'menu.asideCollapse', value: state.asideCollapse, user: true }, { root: true }) }, } 调用方法(第一个参数为路径，第二个参数为方法) ...mapActions('d2admin/personnel', ['asideCollapseSet']), this.$set使用 使对象属性响应式// 用法 this.$set( target, key, value ) // target：要更改的数据源(可以是对象或者数组) // key：要更改的具体数据 // value ：重新赋的值 监听浏览器返回键(vue中)mounted() { if (window.history &amp;&amp; window.history.pushState) { // 向历史记录中插入了当前页 history.pushState(null, null, document.URL); window.addEventListener('popstate', this.goBack, false); } }, destroyed() { window.removeEventListener('popstate', this.goBack, false); }, methods: { goBack() { console.log(\"执行事件\"); this.Out(); }, } 获取全部svg图片// 获取文件夹下面的所有SVG图片 const ctx = require.context('@/assets/img', false, /\\.(svg)$/); const iconSvg = {}; for (const key of ctx.keys()) { iconSvg[key.replace(/[.svg\\/]/g, \"\")] = ctx(key).default; } // 使用 iconSvg.u2182 vue动态路由配置 在vue中创建src/router文件夹并创建autorouter.js和index.js autorouter.js代码import router from './index' import { routerData } from './routerData' // 配置了不走 路由router-view const routersWithoutLayout = routerData.routersWithoutLayout // 使用replace（不记录动态路由地址） const nothing = routerData.nothing let fullPath router.beforeEach(async (to, from, next) => { // 默认的首页页面 if (to.fullPath === '/') { next('/login') } else if (to.matched.length === 0) { // 获取组件路径 fullPath = to.fullPath.indexOf('?') > -1 ? to.fullPath.substring(0, to.fullPath.indexOf('?')) : to.fullPath console.log(nothing.indexOf(componentpath) >= 0 ? false : true); let componentpath = fullPath.substring(1) if (nothing.indexOf(componentpath) >= 0 ? false : true) { // 添加路由 router.addRoute({ path: fullPath, name: componentpath, meta: { withLayout: routersWithoutLayout.indexOf(componentpath) >= 0 ? false : true }, component: () => import('@/views/' + componentpath + '.vue') }) next({ ...to, replace: false }) // 路由重匹配 } } else { if (fullPath === '/login' || fullPath === '/configure/index') { // /login和/configure/index 放行不拦截 next() } else if (!(JSON.parse(sessionStorage.getItem('loginPersonnelInformation')).token != '' &amp;&amp; JSON.parse(sessionStorage.getItem('loginPersonnelInformation')).token != null &amp;&amp; JSON.parse(sessionStorage.getItem('loginPersonnelInformation')).token != undefined)) { next('/login') } else { next() } } }) index.js代码import Vue from 'vue' import VueRouter from 'vue-router' import { routerData } from './routerData' Vue.use(VueRouter) const routes = [] const routersWithoutLayout = routerData.routersWithoutLayout routerData.nothing.forEach(element => { // 部分固定路由不由动态路由加载（部分需求使用） routes.push({ path: \"/\" + element, name: \"/\" + element, component: () => import('@/views/' + element + '.vue'), meta: { withLayout: routersWithoutLayout.indexOf(element) >= 0 ? false : true } }) }); const router = new VueRouter({ mode: 'hash', base: process.env.BASE_URL, routes: routes }) // 下面为push和replace跳转报错问题 const originalPush = VueRouter.prototype.push VueRouter.prototype.push = function push(location, onResolve, onReject) { if (onResolve || onReject) return originalPush.call(this, location, onResolve, onReject) return originalPush.call(this, location).catch(err => err) } const originalReplace = VueRouter.prototype.replace VueRouter.prototype.replace = function replace(location) { return originalReplace.call(this, location).catch(err => err) } export default router routerData.js代码const routerData = { // 配置了不走 路由router-view routersWithoutLayout: ['login', 'home', 'configure/index'], // 使用replace（路由返回直接跳过该路由，该路由为静态路由，不由动态路由生成） nothing: ['case/list'] } export { routerData, } 在main.js配置import router from './router' // 路由引入 import './router/autorouter' // 动态路由 鼠标滚动动态监听 监听创建let self = this self.$nextTick(() => { window.addEventListener(\"scroll\", self.handlel, true); }); // handlel是方法 handlel(e) { console.log(e.target.scrollTop); } 鼠标滚监听销毁let self = this self.$nextTick(() => { window.removeEventListener(\"scroll\", self.handlel); }); 组件批量注册 在components文件夹下创建commonComs.js代码如下// 注意组件里必须写name const context = require.context('@/components', true, /.vue$/); export const install = (Vue) => { context.keys().forEach(key => { const component = context(key).default; Vue.component(component.name.replace(/^\\S/, s => s.toUpperCase()), component) }); } 在man.js文件引入// 全局批量注册组件 import * as vueComs from '@/components/commonComs.js' Vue.use(vueComs) 全局注册loading 在vue中创建src/loading文件夹 在loading创建loading.js代码如下// loading.js import LoadingComponent from './loading.vue' const loading = { install: function (Vue) { // 创建一个Vue的“子类”组件 const LoadingConstructor = Vue.extend(LoadingComponent) // 创建一个该子类的实例,并挂载到一个元素上 const instance = new LoadingConstructor() // 将这个实例挂载到动态创建的元素上,并将元素添加到全局结构中,document.createElement()是在对象中创建一个对象 instance.$mount(document.createElement('div')) //appendChild() 方法在节点的子节点列表末添加新的子节点 document.body.appendChild(instance.$el) // 在Vue的原型链上注册方法，控制组件 Vue.prototype.$loading = { show: () => { instance.show = true }, hide: () => { instance.show = false }, } }, show: function () { // console.log('show') } } export default loading // 使用方法this.$loading.show(); // 关闭方法this.$loading.hide(); 在loading文件夹下创建loading.vue文件代码如下&lt;template> &lt;van-overlay :show=\"show\" style=\" display: flex; align-items: center; justify-content: center; background-color: rgba(0, 0, 0, 0); \" > &lt;van-loading v-if=\"show\" type=\"spinner\" color=\"white\" /> &lt;/van-overlay> &lt;/template> &lt;script> export default { name: \"Loading\", data() { return { show: false, }; }, }; &lt;/script> 在man.js中注册// 注册全局Loading import Loading from '@/loading/loading.js' Vue.use(Loading) 图片全局注册 在src/icons/img中创建many和single文件夹 many中放department_active.png和department.png图片,single中放dw.png图片 在img中创建icon.scss代码如下$many-icons: department; // 多模式图标 @each $icon in $many-icons { .icon-#{$icon} { display: inline-block; width: 40px; height: 40px; background: url(\"./many/#{$icon}.png\") top center no-repeat; background-size: 100%; // link未访问,visited已访问,hover悬浮 ,active活动链接 &amp;:active { background: url(\"./many/#{$icon}_active.png\") top center no-repeat; background-size: 100%; } } } // 单模式图标 $single-icons: dw; @each $icon in $single-icons { .icon-#{$icon} { display: inline-block; width: 40px; height: 40px; background: url(\"./single/#{$icon}.png\") top center no-repeat; background-size: 100%; } } /* &lt;i class=\"icon-department\" /> &lt;i class=\"icon-dw\" /> */ 在main.js中注册import '@/assets/icons/img/icon.scss' // img图标 批量配置svg组件图标 在src/icons中创建svg文件夹，在svg文件夹中放入blue.svg和icon.svg 在svg中创建index.js代码如下const req = require.context('/', false, /\\.svg$/) const requireAll = requireContext => { requireContext.keys().map(requireContext) } requireAll(req) 在vue.config.js中配置并安装”svg-sprite-loader”: “^4.1.6”如下npm install svg-sprite-loader@4.1.6 --save-dev module.exports = { chainWebpack: config => { config.module .rule('svg') .exclude.add(resolve('src/assets/icons')) .end() config.module .rule('icons') .test(/\\.svg$/) .include.add(resolve('src/assets/icons')) .end() .use('svg-sprite-loader') .loader('svg-sprite-loader') .options({ symbolId: 'icon-[name]' }) .end() } } 在main.js中注册import '@/assets/icons/svg' //批量配置svg组件图标 使用&lt;svg aria-hidden=\"true\"> &lt;use :xlink:href=\"#icon-blue\">&lt;/use> &lt;/svg> 组件模式使用&lt;template> &lt;svg :class=\"svgClass\" aria-hidden=\"true\"> &lt;use :xlink:href=\"iconName\">&lt;/use> &lt;/svg> &lt;/template> &lt;script> export default { name: \"svgIcon\", props: { iconClass: { type: String, type: String, required: true, }, className: { type: String, }, }, computed: { iconName() { return `#icon-${this.iconClass}`; }, svgClass() { if (this.className) { return \"svg-icon \" + this.className; } else { return \"svg-icon\"; } }, }, }; &lt;/script> &lt;style scoped> .svg-icon { width: 100%; height: 100%; overflow: hidden; } &lt;/style> /* 使用 &lt;SvgIcon iconClass=\"icon\" /> */ 子孙传参v-bind=\"$attrs\" &lt;!-- 父组件A，子组件B，孙组件C。 A上设置值，若没在B上用props进行接收，则可以直接在B中的C设置v-bind=\"$attrs\"，此时相当于把属性直接设置在C上。 --> 孙父方法传递v-on=\"$listeners\" &lt;!-- 父组件A，子组件B，孙组件C。 C组件中emit事件后，在B中可以直接使用v-on=\"$listeners\"接收，此时可以在A组件中的B上直接使用C中emit出来的事件。 -->","link":"/2021/08/07/vue/"},{"title":"vue2自定义指令","text":"指令批量注册 src下创建directive文件夹并创建index.js中代码如下 import resize from './resize' const install = function(Vue) { Vue.directive('resize',resize) } if (window.Vue) { window['resize'] = resize Vue.use(install); } export default install main.js引用 import directive from './directive'; Vue.use(directive) 监听div宽高指令 在directive中创建resize文件夹并创建index.js代码如下 export default { bind(el, binding) { // el为绑定的元素，binding为绑定给指令的对象 let width = \"\", height = \"\", time = null, number = 0; function isReize() { const style = document.defaultView.getComputedStyle(el); if (width !== style.width || height !== style.height) { if (number !== 0) { clearTimeout(time) time = setTimeout(() => { binding.value({ width: style.width, height: style.height }); // 关键(这传入的是函数,所以执行此函数) }, 300); } } width = style.width; height = style.height; number++; } el.__vueSetInterval__ = setInterval(isReize, 10); }, unbind(el) { clearInterval(el.__vueSetInterval__); }, }; 使用 &lt;div v-resize=\"wrapperResize\">&lt;/div> methods: { /* 处理首页自适应 */ wrapperResize(date){ console.log(date); }, }","link":"/2023/01/04/vue2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"},{"title":"vue3-ts-vite","text":"根元素vue3中的app单文件不再强制要求必须有根元素,在vue2.0中必须要有一个根元素，在vue3中没这个要求 sass使用webpack建立的项目，使用sass需要node-sass和sass-loadervite项目建立vue项目 直接安装sass依赖包就可以直接使用 &lt;!-- vite项目需要在vite.config.ts中配置如下 --> export default defineConfig({ css: { preprocessorOptions: { scss: { additionalData: `@import \"@/assets/css/variable.scss\";`, }, }, }, });","link":"/2022/08/07/vue3.0/"},{"title":"vue","text":"vue.config.js配置 'use strict' const path = require('path'); const resolve = dir => path.join(__dirname, dir); const ip = 'http://192.168.28.133:8084/'; // 后端地址 module.exports = { outputDir: './www', //打包后文件位置 publicPath: './', // 安卓打包不加点。 productionSourceMap: false, // 调试文件的功能关闭 能加快打包 chainWebpack: config => { // 添加别名 config.resolve.alias .set('@', resolve('src')) .set('assets', resolve('src/assets')) .set('components', resolve('src/components')) .set('common', resolve('src/common')) .set('views', resolve('src/views')) // vue首屏加载慢解决方法 config.plugins.delete('prefetch') }, devServer: { open: false, port: 8081, host: 'localhost', // host: '192.168.28.194', //自己ip地址 https: false, hotOnly: false, disableHostCheck: true, proxy: { // 配置跨域 '/api': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/api': '/api' } }, '/image': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/image': '/image' } }, '/documents': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/documents': '/documents' } }, '/imporTemp': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/imporTemp': '/imporTemp' } }, '/logout': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/logout': '/logout' } }, '/resource': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/resource': '/resource' } }, '/process': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/process': '/process' } }, '/anonymous': { target: ip, ws: true, changOrigin: true, pathRewrite: { '^/anonymous': '/anonymous' } } }, } }","link":"/2022/07/14/vueConfigJs/"},{"title":"Vue CLI 生成的 Vue 项目依赖解释","text":"@vue/cli-plugin-babel这是 Vue CLI 中的一个预设（preset），它是为了处理 Vue 项目中使用的 JavaScript 代码而设计的,使用vue默认 Babel 预设，确保了项目中的 JavaScript 代码能够在不同的浏览器和环境中正常运行和兼容在vue跟目录下新建babel.config.js代码如下 module.exports = { presets: [ '@vue/cli-plugin-babel/preset' ] } @vue/cli-plugin-eslint命令npm run lint依赖于@vue/cli-plugin-eslint这个插件无其他配置文件 @vue/cli-servicevue项目启动关键依赖 @babel/eslint-parser通常用于替代默认的 ESLint 解析器，以支持更广泛的 JavaScript 语法和特性。以下是使用步骤的简要说明通常在.eslintrc.js文件里配置如下 module.exports = { /* 意味着当前目录 */ root: true, env: { /* node: true 表示你的代码将在 Node.js 环境中运行 */ node: true }, /* 指定要使用的解析器 */ parserOptions: { parser: \"@babel/eslint-parser\" } }; babel.config.js这个文件使用必须安装@babel/core插件","link":"/2020/12/25/vuePackage/"},{"title":"vue插件使用","text":"mint-ui是基于vue的前端组件库 px2rem这里要自己计算转换rem很头疼，所以这里使用插件进行px与rem的转换 vue-barcodevue条形码生成插件 js-md5 安装 npm install --save js-md5 页面引入使用 import md5 from \"js-md5\"; // 密码加密插件 使用 md5(this.loginData.passWord) 数据加密 moment时间格式化 vantvant组件库 vee-validate使用(移动端)在vue中的创建src/plugins/veeValidate文件夹路径 在veeValidate文件夹中创建validate.js代码如下 // 表单验证 import Vue from 'vue' let regularFun = require('./regularFun') import VeeValidate, { Validator } from 'vee-validate'; import zh_CN from 'vee-validate/dist/locale/zh_CN' ///引入中文文件 Vue.use(VeeValidate, { dictionary: { zh_CN: zh_CN } }); Validator.localize('zh_CN'); // 正则验证 regularFun.regular.forEach(res => { Validator.extend(res.name, { getMessage: (field) => `${field}${res.msg}`, validate: (value) => { return res.regular.test(value); }, }); }) //函数验证 regularFun.fun.forEach(res => { Validator.extend(res.name, { getMessage: res.getMessage, validate: res.validate, }); }) /* 验证表单使用 &lt;!-- v-validate=\"{ required: true, email: true, noSpace: value, twoDecimal: value, min: 6, max: 8, name=\"文本\" }\" --> 方法提交前调用 this.$validator.validateAll().then((result) => { if (result) { console.log(this.value); } else { this.$Toast(this.$validator.errors.all()[0]); } }); */ 在veeValidate文件夹中创建regularFun.js代码如下 'use strict' var regular = { regular: [{ name: 'twoDecimal', msg: '请正确输入至多两位有效小数', regular: /^(0|[1-9][0-9]*)(\\.[0-9]{1,2})?$/ }, { name: 'noSpace', msg: '中请勿输入空格', regular: /^\\S*$/ }, { name: 'ipAddr', msg: '请正确输入IPV4地址', regular: /^((25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))\\.){3}(25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))$/ }, { name: 'email', msg: '请正确邮箱地址', regular: /^[\\w!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?$/ }, ], // 多参数写法v-validate=\"{ compareInt:[number1,number2] }\" fun: [{ name: 'confirmPassWord', getMessage(field, args) { return \"密码不一致\" }, validate(value1, value2, args) { return value2 == value1; } }] } module.exports = regular 在man.js引入 import '@/plugins/veeValidate/validate'; // 表单验证 vue中使用(表单验证)v-validate=\"{ required: true, twoDecimal: objectData.clearRubbish }\" &lt;van-field label-width=\"100px\" v-model=\"objectData.clearRubbish\" label=\"清理模具/废料\" v-validate=\"{ required: true, twoDecimal: objectData.clearRubbish }\" :readonly=\"readonly\" required placeholder=\"请请输入时间\" name=\"clearRubbish\" data-vv-name=\"清理模具/废料\" //验证提示错误名字 > 自定义错误提示const validate = { custom: { nickname: { required: () => '昵称不得为空', //写法1 min: \"昵称不得小于3个字符\", //写法2 max: () => '昵称不得大于10个字符' }, password: { required: () => '密码不得为空', min: \"密码不得小于5个字符\", max: () => '密码不得大于200个字符' } }, }; mounted() { this.$validator.localize('zh_CN', validate); } this.$validator.validateAll().then((result) => { if(result){ console.log('成功'); } else { this.$Utils.showLoading(self.$validator.errors.all()[0]); } } 条形码生成 安装 cnpm install @xkeshi/vue-barcode vue 使用页面引入并注册 import VueBarcode from \"@xkeshi/vue-barcode\"; components: { VueBarcode, }, 页面使用(该设备暂不支持:是条形码加载失败显示)value是条形码的值 &lt;VueBarcode value=\"11\" :options=\"{ format: 'CODE39', width: '3px', // 条形码宽度 height: '100px', //条形码高度 textPosition: 'botomm', // 文字位置 displayValue: true, //是否默认显示条形码数据 background: '#fff', //条形码背景颜色 fontSize: '22px', //字体大小 }\" > 该设备暂不支持 &lt;/VueBarcode> 二维码使用 安装 cnpm install qrcodejs2 --save 页面引入使用 import QRCode from \"qrcodejs2\"; 页面代码 &lt;div id=\"itemId\" ref=\"itemid\">&lt;/div> 方法 document.getElementById(\"itemId\").innerHTML = \"\"; new QRCode(document.getElementById(\"itemId\"), { render: \"canvas\", //也可以替换为table width: \"200\", // 二维码宽度 height: \"200\", // 二维码高度 text: \"text\", // 二维码地址 colorDark: \"#333333\", // 二维码颜色 colorLight: \"#ffffff\", // 二维码背景色 correctLevel: QRCode.CorrectLevel.L, // 容错率，L/M/H }); 将html页面转换成图片base64(dom-to-image) 安装 cnpm install --save dom-to-image 使用页面引入 import domtoimage from \"dom-to-image\"; 页面代码 &lt;div id=\"my-node\" class=\"app-top\"> 方法 toImage() { let self = this; let node = document.getElementById(\"my-node\"); domtoimage .toPng(node) .then((base) => { console.log(base); }) .catch(function (error) { console.log(error); }); }, js-md5插件使用1.先安装 npm i js-md5@0.7.3 -save 2.引用 import md5 from \"js-md5\"; 3.使用 this.loginData.password = md5(this.loginData.password); 进度条插件nprogress 在路由里添加 npm install nprogress@0.2.0 –save import NProgress from \"nprogress\"; import \"nprogress/nprogress.css\"; NProgress.configure({ showSpinner: false }); const router = new VueRouter({ mode: \"history\", routes, }); router.beforeEach((to, from, next) => { NProgress.start(); }) router.afterEach(() => { NProgress.done(); }); 下载图片及其它类型文件的方法ly-downloadernpm i --save ly-downloader &lt;!-- 使用页面引入使用 --> import downLoadDom from \"ly-downloader\"; &lt;!-- data: type = 1 时,url传入文件地址； type = 2 时,url传入一个canvas对象，配合html2canvas使用 --> downLoadDom(type, 'url', '文件名'); 网页转pdf在src中创建plugins/htmlToPdf.js然后代码如下 import html2Canvas from 'html2canvas' import JsPDF from 'jspdf' export default { install(Vue) { Vue.prototype.dom2Pdf = function (options, direction = '') { html2Canvas(document.querySelector('#' + options.dom), { allowTaint: true }).then(function (canvas) { let contentWidth = canvas.width let contentHeight = canvas.height let pageHeight = (contentWidth / 592.28) * 841.89 let leftHeight = contentHeight let position = 0 let imgWidth = 845 let imgHeight = (845 / contentWidth) * contentHeight let pageData = canvas.toDataURL('image/jpeg', 1.0) let PDF = new JsPDF(direction, 'pt', 'a4') if (leftHeight &lt; pageHeight) { PDF.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight) } else { while (leftHeight > 0) { PDF.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight) leftHeight -= pageHeight position -= 841.89 if (leftHeight > 0) { PDF.addPage() } } } PDF.save(options.name + '.pdf') }) } } } &lt;!-- 在main.js中全局注册 --> import htmlToPdf from './plugins/htmlToPdf' &lt;!-- 使用 L：是否横向--> &lt;div id=\"print_area\"> &lt;/div> dom2Pdf({ dom: 'print_area', name: '名字' }, 'L') moment时间格式化插件使用/* 添加时间格式化插件 */ import moment from \"moment\"; import \"moment/locale/zh-cn\"; moment.locale(\"zh-cn\"); Vue.prototype.$moment = moment; js-cookie使用 安装 npm install --save js-cookie 引用使用 import Cookies from 'js-cookie' &lt;!-- 创建一个名称为name，对应值为value的cookie，由于没有设置失效时间，默认失效时间为该网站关闭时 --> Cookies.set(name, value) &lt;!-- 创建一个有效时间为7天的cookie --> Cookies.set(name, value, { expires: 7 }) &lt;!-- 创建一个带有路径的cookie --> Cookies.set(name, value, { path: '' }) &lt;!-- 创建一个value为对象的cookie --> const obj = { name: 'ryan' } Cookies.set('user', obj) &lt;!-- 获取指定名称的cookie --> Cookies.get(name) // value &lt;!-- 获取value为对象的cookie --> const obj = { name: 'ryan' } Cookies.set('user', obj) JSON.parse(Cookies.get('user')) &lt;!-- 获取所有cookie --> Cookies.get() &lt;!-- 删除指定名称的cookie --> Cookies.remove(name) // value &lt;!-- 删除带有路径的cookie --> Cookies.set(name, value, { path: '' }) Cookies.remove(name, { path: '' }) vuedraggable使用(div拖拽功能) 安装 npm install vuedraggable@2.24.3 --save 组件封装使用 &lt;template> &lt;div class=\"dragList\" :style=\"defaultPrivateconfig.style\"> &lt;Draggable v-model=\"draggableList\" tag=\"ul\" :sort=\"defaultPrivateconfig.sort\" item-key=\"id\" :group=\"defaultPrivateconfig.group\" :animation=\"defaultPrivateconfig.animation\" :disabled=\"defaultPrivateconfig.disabled\" :chosenClass=\"defaultPrivateconfig.chosenClass\" :ghostClass=\"defaultPrivateconfig.ghostClass\" @start=\"start\" @end=\"end\" :filter=\"defaultPrivateconfig.filter\" > &lt;slot name=\"content\" /> &lt;/Draggable> &lt;/div> &lt;/template> &lt;script> import Draggable from \"vuedraggable\"; export default { name: \"HtDraggable\", components: { Draggable }, props: { group: { type: Object, default: () => {}, }, /* 数据源 */ list: { type: Array, default: () => [], }, /* 私有配置 */ privateconfig: { type: Object, }, }, data() { return { /* 数据源 */ draggableList: [], /* 默认私有配置 */ defaultPrivateconfig: { /* 内部样式 */ style:'', // width:150px;height: 500px; group: { name: \"siteA\", // name相同时可互相托 pull: true, // 是否允许拖出当前组，默认为true put: true, // 是否允许拖入当前组，默认为true }, /* 同组是否可拖动 */ sort: true, /* 是否启用拖拽组件 */ disabled: false, /* 拖动时的动画效果时间 */ animation: 1000, /* 不允许拖动class 入 .ak*/ filter: \"\", /* 被选中目标的样式 */ chosenClass: \"\", /* 拖动元素的占位符类名 */ ghostClass: \"sortable-ghost\", }, }; }, created() { /* 初始化赋值 */ this.draggableList = JSON.parse(JSON.stringify(this.list)); }, watch: { privateconfig: { handler(data) { this.defaultPrivateconfig = { ...this.defaultPrivateconfig, ...data }; }, deep: true, immediate: true, }, draggableList: { handler(data) { this.list.length = 0; this.list.push(...data); }, deep: true, }, }, methods: { /* 拖动开始 */ start(s) { this.$emit(\"start\", s); }, /* 拖动结束 */ end(e) { this.$emit(\"end\", e); }, }, }; &lt;/script> &lt;style lang=\"scss\" scoped> .dragList { overflow: auto; } &lt;/style> sortablejs使用(div拖拽功能) 安装 npm install sortablejs@1.15.0 --save 页面使用 vuehtml部分 &lt;div class=\"setting-column__list\" ref=\"list\"> &lt;ul> &lt;li v-for=\"(item, i) in fieldSettingConfiguration\" :key=\"item.colName\" class=\"positionField\" > &lt;/li> &lt;/ul> &lt;/div> &lt;!-- 逻辑部分 --> &lt;script> import Sortable from \"sortablejs\"; export default { methods: { rowDrop() { const _this = this; const tbody = this.$refs.list.querySelector(\"ul\"); Sortable.create(tbody, { handle: \".positionField\", // 可拖设置 animation: 250, ghostClass: \"ghost\", onEnd({ newIndex, oldIndex }) { const tableData = JSON.parse( JSON.stringify(_this.fieldSettingConfiguration) ); const currRow = tableData.splice(oldIndex, 1)[0]; tableData.splice(newIndex, 0, currRow); &lt;!-- 拖后新数据 --> _this.fieldSettingConfiguration = JSON.parse( JSON.stringify(tableData) ); }, }); }, } } &lt;/script> js-cookieimport Cookies from 'js-cookie' &lt;!-- 设置值 --> Cookies.set('名字', 存储的值) &lt;!-- 获取指定值 --> Cookies.get('名字') &lt;!-- 完整token工具实例 --> import Cookies from 'js-cookie' const TokenKey = 'Admin-Token' export function getToken() { return Cookies.get(TokenKey) } export function setToken(token) { return Cookies.set(TokenKey, token) } export function removeToken() { return Cookies.remove(TokenKey) } jsencrypt(密钥加密解密) 工具文件jsencrypt.js代码如下 import JSEncrypt from 'jsencrypt'; //引入模块 &lt;!-- 密钥对生成 http://web.chacuo.net/netrsakeypair --> &lt;!-- 公钥 --> const pubKey = 'MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANL378k3RiZHWx5AfJqdH9xRNBmD9wGD2iRe41HdTNF8RUhNnHit5NpMNtGL0NPTSSpPjjI1kJfVorRvaQerUgkCAwEAAQ=='; &lt;!-- 私钥 --> const priKey = 'MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEA0vfvyTdGJkdbHkB8mp0f3FE0GYP3AYPaJF7jUd1M0XxFSE2ceK3k2kw20YvQ09NJKk+OMjWQl9WitG9pB6tSCQIDAQABAkA2SimBrWC2/wvauBuYqjCFwLvYiRYqZKThUS3MZlebXJiLB+Ue/gUifAAKIg1avttUZsHBHrop4qfJCwAI0+YRAiEA+W3NK/RaXtnRqmoUUkb59zsZUBLpvZgQPfj1MhyHDz0CIQDYhsAhPJ3mgS64NbUZmGWuuNKp5coY2GIj/zYDMJp6vQIgUueLFXv/eZ1ekgz2Oi67MNCk5jeTF2BurZqNLR3MSmUCIFT3Q6uHMtsB9Eha4u7hS31tj1UWE+D+ADzp59MGnoftAiBeHT7gDMuqeJHPL4b+kC+gzV4FGTfhR9q3tTbklZkD2A=='; &lt;!-- 公钥数据加密 --> export function encryptData(data) { if (typeof data === 'object') { data = JSON.stringify(data); } let encryptor = new JSEncrypt(); &lt;!-- 创建加密对象实例 --> encryptor.setPublicKey(pubKey); &lt;!-- 设置公钥 --> let rsaPassWord = encryptor.encrypt(data); &lt;!-- 对内容进行加密 --> return rsaPassWord.toString(); } &lt;!-- 私钥数据解密 --> export function decryptData(data) { if (typeof data === 'object') { data = JSON.stringify(data); } let decrypt = new JSEncrypt(); &lt;!-- 创建解密对象实例 --> decrypt.setPrivateKey(priKey); &lt;!-- 设置秘钥 --> let uncrypted = decrypt.decrypt(data); &lt;!-- 解密之前拿公钥加密的内容 --> return uncrypted.toString(); } crypto-js(加密解密) 工具文件cryptoJs.js代码如下 import CryptoJS from 'crypto-js'; let localKey = '9966'; &lt;!-- Aes本地数据加密 --> export function localEnc(data) { let _word = CryptoJS.enc.Utf8.parse(data); let _key = CryptoJS.enc.Utf8.parse(localKey); let _iv = _key; let encrypt = CryptoJS.AES.encrypt(_word, _key, { iv: _iv, mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7, }); return encrypt.toString(); } &lt;!-- Aes本地数据解密 --> export function localDec(data) { let _key = CryptoJS.enc.Utf8.parse(localKey); let _iv = _key; let decrypt = CryptoJS.AES.decrypt(data, _key, { iv: _iv, mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7, }); return decrypt.toString(CryptoJS.enc.Utf8); } iconfont阿里图标使用 访问官网进入我的项目阿里图标地址 在main.js中引入 /* 导入字体图标 */ import \"./assets/iconfont/iconfont.js\"; import \"./assets/iconfont/iconfont.css\"; svg-sprite-loader插件使用 安装 npm install svg-sprite-loader -D 在 vue.config.js中配置如下 chainWebpack: (config) => { /* svg批量导入封装配置 */ config.module .rule(\"svg\") .exclude.add(path.join(__dirname, \"src/assets/svg\")) .end(); config.module .rule(\"icons\") .test(/\\.svg$/) .include.add(path.join(__dirname, \"src/assets/svg\")) .end() .use(\"svg-sprite-loader\") .loader(\"svg-sprite-loader\") .options({ symbolId: \"icon-[name]\" }) .end(); } 封装组件代码如下 &lt;template> &lt;svg :class=\"svgClass\" aria-hidden=\"true\"> &lt;use :xlink:href=\"iconName\" :fill=\"props.color\" /> &lt;/svg> &lt;/template> &lt;script> export default { name: \"svgIcon\" }; &lt;/script> &lt;script setup> import { computed } from \"vue\"; const props = defineProps({ iconName: String, iconClass: String, color: String }); let iconName = computed(() => `#icon-${props.iconName}`); let svgClass = computed(() => props.iconClass ? \"svg-icon \" + props.iconClass : \"svg-icon\" ); &lt;/script> &lt;style scoped> .svg-icon { width: 1em; height: 1em; position: relative; fill: currentColor; vertical-align: -2px; } &lt;/style> 使用组件 &lt;template> &lt;svg-icon iconName=\"word\" color=\"#44c089\" /> &lt;i class=\"iconfont icon-word\" /> &lt;svg-icon color=\"#333333\" iconName=\"gonggongzujian_jianshao\" /> &lt;SvgIcon color=\"#0275ff\" iconName=\"blue\" /> &lt;/template> 特别说明该组件可使用assets/iconfont的图标代码如下 &lt;svg-icon iconName=&quot;word&quot; color=&quot;#44c089&quot; /&gt; 具体iconName值请查看assets/iconfont/iconfont.json中的font_class字段如下图","link":"/2020/08/10/vue%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"title":"vueProps使用","text":"defineProps/* JavaScript方式无默认值无类型 */ const props = defineProps([\"foo\", \"list\",\"config\"]); /* JavaScript方式无默认值有类型 */ const props = defineProps&lt;{ foo: string, list: Array, config: Object }>() /* JavaScript方式有默认值有类型 */ const props = defineProps({ foo: { type: String, default: \"defaultFoo\" }, list: { type: Array, default: () => [] }, config: { type: Object, default: () => ({ key: \"value\" }) } }); /* TypeScript方式有默认值有类型 */ interface Props { msg?: string labels?: string[] } const props = withDefaults(defineProps&lt;Props>(), { msg: 'hello', labels: () => ['one', 'two'] }) defineEmitsconst emit = defineEmits&lt;{ (e: 'change', id: number): void (e: 'update', value: string): void }>() // 3.3+：另一种更简洁的语法 const emit = defineEmits&lt;{ change: [id: number] // 具名元组语法 update: [value: string] }>() /* 无类型 */ const emit = defineEmits([\"changeDetailVisible\"]);","link":"/2020/12/25/vue%E8%AF%AD%E6%B3%95/"},{"title":"刷乳胶漆标准工序流程","text":"成品保护遮盖地板、家具、门窗、开关插座等，防止沾染油漆。使用专业保护膜、美纹纸(如3M品牌)固定。 基层检查与处理铲除旧层：铲掉旧墙起皮、空鼓的腻子或涂料(用铲刀彻底清理)修补裂缝：用嵌缝石膏填补裂缝，满墙挂纤维网加固(裂缝处需扩缝处理)涂刷墙固(界面剂)：增强基层附着力，减少起粉(涂刷均匀，避免漏涂) 石膏找平用粉刷石膏填补墙面凹陷、线槽等(确保墙面平整度误差≤3mm)。 刮腻子3遍第一遍：厚刮找平，干燥后打磨凸点。第二、三遍:薄刮收光,每遍需完全干透(阴干48小时,避免通风直吹)。选材建议：耐水腻子(如美巢、立邦)更防潮。打磨墙面用砂纸120-240目或打磨机精细打磨,消除划痕、波浪纹。打磨后清除浮灰(用鸡毛掸子或吸尘器)。 涂刷底漆(关键步骤)作用：封闭基层，提高面漆附着力，防霉抗碱。施工:均匀涂刷1遍,无漏涂,流挂(兑水比例≤10%)。 涂刷面漆2遍第一遍:均匀覆盖,干燥后修补瑕疵(一般间隔2-4小时)。第二遍：同方向涂刷，避免色差(滚筒建议用短毛款，减少飞溅)。技巧：采用”W”或”M”型滚涂，最后轻拉收匀。 清理与验收撕除保护膜，清洁现场。 验收标准平整度检测标准：用2米靠尺贴墙检测，缝隙≤3mm（普通住宅）或≤2mm（高级装修）；阴阳角垂直偏差≤3mm24。方法：白天自然光：侧光观察墙面，阴影断层或波纹状说明不平整； 漆膜完整性掉粉/起泡：用白手套擦拭墙面，无粉末残留；透明胶带粘贴后撕下，不带走漆皮8。流坠/色差：距墙2米目视检查，无色差、无泪痕、无透底；开关面板边缘补漆处需与整体颜色一致","link":"/2025/07/31/%E5%88%B7%E4%B9%B3%E8%83%B6%E6%BC%86%E6%A0%87%E5%87%86%E5%92%8C%E9%AA%8C%E6%94%B6/"},{"title":"npm包管理发布","text":"eb6c3c9aa42589e8eb6438693b15c1657dfc5ed3c0ae94a3a03d196d962f73c11a70dd2f18c24551e313a9d7e8903852f165f4e41bcedc8a381a83046609c4b2acb0f67187337b21b9c24b4ca8423383400f4c6b4cff559d882e11ce56bf6be4184415249329f14902fd6dc8049641776e3eb4c139aecfe58d339ef64e983ffba296ec07a7942a1d515d8813bccb4c48497bd57adf73d0e70f5352a17df6ced9dde1e6094c6d4d946d5cfc6394e6d9d5feec97d59b0926ff3f24545b86650522947450087f181647c82ec168b6524026e4a6fcec57938ef3be335f6b25e79f415ac192aaa07dd817d66ea1b78f39a4db65a35f0cdc08230b757fc455e3901b9229ada47fcfb6a32b957c957f6eb2e13ce029b4677f72f2ab658d01bfc5244bda12e40d234bd514c19016e1609bc7e7bf02914378407fa4f1b171c2af72676d2cce355614a95088c20ea97b0abeb371ba267c8ba37cb578c2af4090f53ee03e28b0d973628f808d828ea87340a3fc9cfebd1753c748191063d471073c2cdcb16c6e2fc8f66012a8f3388ce0c4f82c05670d2b0ea03131785632f32857c44764e37c3fbb4f7c8f8d201172ea47c0009b3469bcc3e4e32204af99c286006e21fbb6aba9edc271316654d0b20c0de48001d0c85586f9a847b5add7478585e63881b1477da1d311bf36dec62b7d131b28e037d17edc2dd7d8699ae61051ac93b25f994ed957f188be30ae7483de5005115e5c141b125fb3b51a125d810a121f1015f656cac0eea8034bf92e0563429470f7808ecd29eaa285c2c9ff9719cc071fc7485a352513f1da74d9d0f9f21df46ff067fac038467dfa8c74ca2604f7c49e53461ee14acfc0e50a25c076c9c75f0760bdd907a2324b487185e3214bd40d66d803901e1ad91f44183cadb5d17843e69d80d59552dc8aa884bfbda92de086aad4180d1e61e8d34e173aa6c4d0565497ae192a8b7158bae3355f5074379a9ab8a66e532518f798d120f428a8366256385e84a0db9aa94342a9b492d826e7dc59c036c7aea8d31eac9e4d14e78dde60352f8558c790689f48b8449df4635187b237050cecd99705d8e0528e34dc4da6be0adafc279f0cf6ff66dabdd697403b1c60ff83d2c9495e92342db52c8df6b65b4e0d26696dee4b0e7f42d25496b3770e110f3d78bb436cab3621092c1f821e7e61edc0464bc3afdcfce17891b78b0c44df25adf02898cc7a1dfe94151d98ede1cb46acaf33f7cbf298d07a79f7067be272f334391ab886689968453feeb37fd406813c043c1db690204f5c491192773a52de99c51b89062bf2f6e2765abbaac1877bbae3f98db9118de787fd3ce0ded56c8cdc7237d936efb2d808dcef1115a16e9a00c4753e045b6421e85252fdb3e7444e6a6d702b587d4d466043d0d3efe6d584a828369bc7aa4ff9a6134c2fa748b776859e671b7cc7b493665bbfed1028ec9b8a627b4e64ca9af3a05efe3d9911e23531a0089c8abb40f918e3fadedf83346dbfefebbbdab446361d3c142f5208acfef9486a60ab06bfa1f2f21dcf9bc03167055464e598e0aa3ac6661a8072f796f9a68e6bf41def6e0d6da326474a160ceef9f942b4ac10e05f98e6a1ce9b6dfd8fe644c605e531dfc8389d4dfd62bd5b3a7ca1119678ee93966780f6f523d778c2fe0aa0da2e5044dc15abb33971b64739d0c5e6444d543ca386d78e06176b02478aca385183f829685ea4a0f114f62b0d20b1c0a49e4de633623f878dd6e2689987fd12d5b5afe25077f0ce4fe4b73b208bc38e77488ce182ccc97f4fe6a3cbe7fef117a9e855f72c539762259e5bb1610f3023fe5dc98ef93c66700f5c6ee5f10f86a8c14cfae964d3a32ae37f41ed0b3cedfdf1072a2d89a62f9948b71ba0111f3ac793fc57f338d8e4a2504576fc79bf63a5df87012363fd4504617d0c0259e61d6bcf008b37abe0af184ade79bc06530ff2cd655ecdfba727f0c0e252736fae951eec0d96dc898bf1614e23488ae23764aa8374b0f48927ba2ceee7ab96067dae46d875f676d4be86b013777eb7ff39809b1bbe47044ed5459db768c84628bc9311f5a2781230aae2d6dc31fa348f352042af8fc572a266b3b9ceb3ade096e0821688ae8b340029ee26f7483a21d2 请输入密码后回车查看","link":"/2024/10/11/%E5%8C%85%E7%AE%A1%E7%90%86/"},{"title":"原生ajax请求封装","text":"阿杰博客 所有类型封装 // 统一的请求地址 var apiUrl = 'http://192.168.9.189:8001' let token = localStorage.getItem(&quot;token&quot;); // 获取token var fnApi = function(options, url, type) { if (url.slice(0, 4) === 'http' || url.slice(0, 4) === 'https') { apiUrl = '' } return new Promise(function(resolve, reject) { $.ajax({ type: type, url: apiUrl + url, data: JSON.stringify(options), contentType: 'application/json', success: function(res) { resolve(res); }, error: function(err) { reject(err) }, complete: function() { top.App.unblockUI(); } }); }).catch((e) =&gt; { return false; }) }","link":"/2020/12/26/%E5%8E%9F%E7%94%9Fajax%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"},{"title":"小细节","text":"2022-08-04 00:00:00与 2022/08/04 00:00:00(无时分秒时)&lt;!-- 带横杠(-)的时间转换出的时间戳比带斜杠(/)的多8小时 --> new Date('2022-08-04 00:00:00').getTime() new Date('2022/08/04 00:00:00').getTime()","link":"/2022/08/05/%E5%B0%8F%E7%BB%86%E8%8A%82/"},{"title":"记录","text":"分支说明 凯越： 分支feature/V1-kaiyue （platform: !VITE_USE_MOCK ? `${ip}:2800/` : `${ip}:2800/`，qms: !VITE_USE_MOCK ? `${ip}:4009/` : `${ip}:4009/`,bpm: !VITE_USE_MOCK ? `${ip}:3000/` : `${ip}:3000/`）， ht-platform-app中publicPath: '/', 凯翼（生产）： 分支V1-kaiyi-new （platform: !VITE_USE_MOCK ? `${ip}:2800/` : `${ip}:8131/vue-platform`，wms: !VITE_USE_MOCK ? `${ip}:4006/` : `${ip}:8131/vue-wms`,） ht-platform-app中publicPath: '/vue-platform', 凯翼（测试）： 分支V1-kaiyi-new （platform: !VITE_USE_MOCK ? `${ip}:2800/` : `${ip}:3100/vue-platform`，wms: !VITE_USE_MOCK ? `${ip}:4006/` : `${ip}:3100/vue-wms`,） ht-platform-app中publicPath: '/vue-platform', 公司58环境： 分支feature/V1 50铃：分支V1-50Ling (platform: !VITE_USE_MOCK ? 'http://localhost:2800/' :`${ip}/vue-platform`,wms: !VITE_USE_MOCK ? 'http://localhost:4006/' :`${ip}/vue-wms/`,) ht-platform-app中publicPath: '/vue-platform', 天合宿迁:release/prod-trinaSuqian.v1.23.03.27(id动态ip) eam: { url: !VITE_USE_MOCK ? 'http://localhost:4007/' : `${ip}:4007/`, isAlive: false, }, platform: { url: !VITE_USE_MOCK ? 'http://localhost:2800/' : `${ip}:2800/`, isAlive: false, }, 天合青海:release/prod-trinaQinghai.v1.23.03.27(id动态ip) eam: { url: !VITE_USE_MOCK ? 'http://localhost:4007/' : `${ip}:4007/`, isAlive: false, }, platform: { url: !VITE_USE_MOCK ? 'http://localhost:2800/' : `${ip}:2800/`, isAlive: false, }, 杭州wms:feature/WMS 阜阳：分支V2-fuYang （platform: !VITE_USE_MOCK ? `${ip}:2800/` : `${ip}:2800/`，fyMes: !VITE_USE_MOCK ? `${ip}:4012/` : `${ip}:4012/`，mes: !VITE_USE_MOCK ? `${ip}:4012/` : `${ip}:4012/`，） 五菱eam: 分支V2 4007端口 广汽AVI 分支V2 platform 2800 gcMes 4008 v1正式环境 release/prod-v23.07.18 v2验收环境 release/sim-v2-23.08.16 v3验收环境 origin/sim-v3-2023.10.16 v2正式环境 prod-v2 川仪eam 分支V2-chuanYi eam7007端口 平台2800 捷运机场分支V1 platform 31017 wms 31022 V3项目 广汽avi mes 分支feature/guangQiMes 正式和测试mes端口gcMes 4008 正式和测试platform端口 2800 正式平台id:http://172.18.61.81:2800/ 测试环境ip http://172.18.61.80:2800/ # 单点登录配置(正式环境)：(测试环境先注释了)请放开登录页165行到174行代码 VITE_OAUTH_ISSUER='http://172.18.61.125:19000' VITE_OAUTH_CLIENT_ID='messaging-client' VITE_OAUTH_CLIENT_SECRET='123456' VITE_OAUTH_REDIRECT_URI='http://172.18.61.81:3100/auth-redirect' 赛力斯分支les 分支LES 平台platform端口2800 les端口4019 测试ip 10.48.64.60 正式ip 10.34.17.27 北汽 主应用entry 端口3100 平台platform 端口2800 租户标识baicMes 4017 eam 4007 ip 10.135.18.19 测试环境 ip 10.135.18.2正式环境 ip 10.135.18.3正式环境 VUE3 lean 7019 越南eam 主应用entry 平台platform 2800 ip地址10.162.21.59 10.162.21.60 端口4007 标识eam 天合青海集团化部署分支tianHeQingHaiJiTuanHua ip 10.162.21.202 3100 platform平台2800 eam设备4007 埃安mes分支（aiAnMes） 主应用entry 平台platform(2800) ip地址10.88.7.233 10.88.7.234 租户标识aionThaMes 端口4026 宜兴项目 分支v1-yixing 0.0.6：原来旧版的401 0.0.7 : 401改为4002 添加了token过期快捷登录 0.0.8：在0.0.7基础上添加了4022证书相关的处理 和 永久token处理 0.0.9：最新版本3.5token签名 组件开发与维护.公共组件-&gt; 拉取操作 ● 切换镜像 npm config set registry http://192.168.1.47:9081/repository/npm-group/ ● npm login 登录 ● userName: ht-npm passWord: ht@core@2050 ● npm i 安装 2.公共组件-&gt; 发布操作 ● 切换镜像：npm config set registry http://192.168.1.47:9081/repository/npm-hosted/ ● npm login 登录 ● userName: ht-npm passWord: ht@core@2050 ● 项目package.json去进行配置：&quot;publishConfig&quot;: { &quot;registry&quot;: &quot;http://192.168.1.47:9081/repository/npm-hosted/&quot; } ● npm publish 发布 3.若依项目使用 ● 切换镜像 npm config set registry http://192.168.1.47:9081/repository/npm-group/ ● npm i 安装依赖 ● npm i public-com -S 安装公共组件项目 ● npm run dev 启动项目 数据库连接dsKey：platform 账号：root 密码：root 连接地址：jdbc:mysql://192.168.1.225:3306/ht-core-plus-server dsKey：gencode 账号：root 密码：root 连接地址：jdbc:mysql://192.168.1.50:3306/gencode","link":"/2020/10/10/%E5%B7%A5%E4%BD%9C/"},{"title":"工具混入","text":"禁用ipad返回事件 在src文件夹下创建mixin文件夹并创建disableReturn.js代码如下 /* 禁用ipad返回事件 */ export const disableReturn = { methods: { /* 开启返回事假禁用 */ monitoringEquipment() { const self = this document.addEventListener(\"deviceready\", self.onDeviceReady, false); }, onDeviceReady() { let self = this; document.addEventListener(\"backbutton\", self.exitApp, false); }, exitApp() { console.log('禁用返回成功'); }, destruction() { /* 销毁返回事件禁用 */ const self = this setTimeout(() => { document.removeEventListener(\"backbutton\", self.exitApp, false); }, 2000) } }, } 使用 &lt;script> import { disableReturn } from \"@/mixin/disableReturn.js\"; export default { mixins: [disableReturn], } &lt;!-- 需要禁用时候调用this.monitoringEquipment() --> &lt;/script> 侧边扫码监听 在src文件夹下创建mixin文件夹并创建scanCodeMonitor.js代码如下 /* 侧边扫码监听 */ export const scanCodeMonitor = { created() { /* 开始监听 */ cordova.plugins.Scanner.startScanner( (success) => { console.log(success); }, (err) => { alert(\"开始监听失败\"); } ); }, destroyed() { /* 停止监听Scanner */ cordova.plugins.Scanner.removeEventListener( \"com.evget.scanner.scannerresult\", (success) => { console.log(success); }, err => { alert('停止监听Scanner失败') } ); cordova.plugins.Scanner.endScanner( (success) => { console.log(success); }, (err) => { alert(\"结束监听失败\"); } ); }, } 使用 &lt;script> import { scanCodeMonitor } from \"@/mixin/scanCodeMonitor.js\"; export default { mixins: [scanCodeMonitor], mounted() { /* 需要监听得到的值使用方法如下 */ cordova.plugins.Scanner.addEventListener( \"com.evget.scanner.scannerresult\", (s) => { alert(s.barcode); }, (error) => { alert(error); } ); }, } &lt;/script> 自动更新 在src文件夹下创建mixin文件夹并创建appUpdate.js代码如下 export const appUpdate = { data() { return { checkTimer: null } }, created() { this.setCheckUpdate(); // 自动更新 }, methods: { setCheckUpdate() { if ( process.env.NODE_ENV == \"production\" ) { this.checkUpdate(); clearInterval(this.checkTimer); this.checkTimer = setInterval(() => { this.checkUpdate(); }, 180000); } }, // 自动更新 checkUpdate() { // var updateUrl = \"http://192.168.28.194:8022\"; let updateUrl = window.localStorage.getItem(\"appUpdate\"); // alert(updateUrl); // alert(updateUrl + \"/public/app/version.xml\"); // alert(updateUrl + \"/public/app/app-release.apk\"); window.AppUpdate.checkAppUpdate( function () { // alert(\"success\"); }, function () { alert(\"fail\"); }, updateUrl + \"/public/ipad/version.xml\", // 服务器对比版本文件放在服务器上version.xml { downloadUrl: updateUrl + \"/public/ipad/Hntcipad.apk\" } // 服务器能下载的apk路径地址 ); }, } } 使用 &lt;script> import { appUpdate } from \"@/mixin/appUpdate.js\"; export default { mixins: [appUpdate], } &lt;/script>","link":"/2022/07/04/%E5%B7%A5%E5%85%B7%E6%B7%B7%E5%85%A5/"},{"title":"ui","text":"一款很好用的标注、测量工具，前端必备神器 马克鳗官网地址","link":"/2024/08/24/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"title":"微应用micro","text":"vue2跨应有缓存 子应用main.js添加 window.addEventListener(\"appstate-change\", function(e) { if (e.detail.appState === \"beforeshow\") { let tmpPath = window.location.hash; tmpPath = tmpPath.substring(1); router.push(tmpPath); } }); white文件添加 &lt;template> &lt;div id=\"ht-lowcode-app\"> &lt;keep-alive :include=\"keepLiveRoute\" > &lt;router-view>&lt;/router-view> &lt;/keep-alive> &lt;/div> &lt;/template> &lt;script> export default { name: \"\", data() { return { keepLiveRoute: sessionStorage.getItem(\"keepLiveRoute\") ? [...JSON.parse(sessionStorage.getItem(\"keepLiveRoute\"))] : [], }; }, watch:{ $route(){ this.keepLiveRoute= sessionStorage.getItem(\"keepLiveRoute\") ? [...JSON.parse(sessionStorage.getItem(\"keepLiveRoute\"))] : []; } } }; &lt;/script> 或者两种其一 &lt;template> &lt;div id=\"ht-lowcode-app\"> &lt;router-view v-slot=\"{ Component }\"> &lt;keep-alive :include=\"keepLiveRoute\"> &lt;component :is=\"Component\" :key=\"$route.fullPath\" /> &lt;/keep-alive> &lt;/router-view> &lt;/div> &lt;/template> &lt;script> export default { name: \"\", data() { return { keepLiveRoute: sessionStorage.getItem(\"keepLiveRoute\") ? [...JSON.parse(sessionStorage.getItem(\"keepLiveRoute\"))] : [], }; }, watch:{ $route(){ this.keepLiveRoute= sessionStorage.getItem(\"keepLiveRoute\") ? [...JSON.parse(sessionStorage.getItem(\"keepLiveRoute\"))] : []; } } }; &lt;/script> vue3跨应有缓存&lt;template> &lt;div class=\"white\"> &lt;router-view v-slot=\"{ Component }\"> &lt;keep-alive :include=\"$store.state.keepAlive.keepLiveRoute\"> &lt;component :is=\"Component\" :key=\"$route.fullPath\" /> &lt;/keep-alive> &lt;/router-view> &lt;/div> &lt;/template> 或者 &lt;template> &lt;div id=\"ht-lowcode-app\"> &lt;keep-alive :include=\"$store.state.keepAlive.keepLiveRoute\" > &lt;router-view>&lt;/router-view> &lt;/keep-alive> &lt;/div> &lt;/template> //main.js中 window.addEventListener(\"appstate-change\", function (e) { if (e.detail.appState === \"beforeshow\") { let tmpPath = window.location.hash; tmpPath = tmpPath.substring(1); store.commit(\"pushKeepLive\", null); router.push(tmpPath); } }); window.microApp.addDataListener((data) => { /* tab关闭清除缓存时，菜单延时获取 */ if (\"informationDddTab\" === data.type) { store.commit(\"pushKeepLive\", null); } }); //状态管理新建keepAlive.js export default { state: { keepLiveRoute: [], }, mutations: { pushKeepLive(state, component) { let keepLiveRoute; if (sessionStorage.getItem(\"keepLiveRoute\")) { keepLiveRoute = JSON.parse(sessionStorage.getItem(\"keepLiveRoute\")); if (component) { keepLiveRoute.push(component); } } else { if (component) { keepLiveRoute = []; keepLiveRoute.push(component); } keepLiveRoute = state.keepLiveRoute; } keepLiveRoute = [...new Set(keepLiveRoute)]; keepLiveRoute === undefined ? \"\" : sessionStorage.setItem( \"keepLiveRoute\", JSON.stringify(keepLiveRoute) ); state.keepLiveRoute = keepLiveRoute; }, }, }; 子应用跳转页面this.$router.push({ path: \"/lowcode/online\", query: {name:'tab名字', type:'applicationMenu' , id: id } }); 说明：子项目跳转已有菜单需加type:'applicationMenu'，子项目跳转详情需保证path值在左侧菜单里不存在 跳转详情可不加type:'applicationMenu' 2.路由格式（name和title是tab名字使用）/* 跳转详情需要加路由信息(无论是跨子项目详情还是自己项目详情) 跳项目详情component可不加*/ { path: '/lowcode/online', component: (resolve) => require(['@/views/lowcode/basic/dynamicModel'], resolve), name: '功能预览', meta: { title: '功能预览', affix: false, icon: 'icon-ym icon-ym-btn-preview' } },","link":"/2020/12/26/%E5%BE%AE%E5%BA%94%E7%94%A8/"},{"title":"It问题归纳","text":"测试因为在此系统上禁止运行脚本 问题：cnpm : 无法加载文件 C:\\Users\\28119\\AppData\\Roaming\\npm\\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 解决办法 电脑搜索powerShell管理员运行 set-ExecutionPolicy RemoteSigned 提示输入Y","link":"/2020/12/26/%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"},{"title":"axios请求接口签名","text":"插件安装npm install crypto-js@4.1.1 -D npm install js-base64@3.7.2 -D 创建工具文件 apiSign.js(代码如下) &lt;!-- 签名加密解密 --> import CryptoJS from 'crypto-js'; import settings from './settings.js'; import { Base64 } from 'js-base64'; const key = CryptoJS.enc.Utf8.parse('1234567890ABCDEF'); //16位 const iv = CryptoJS.enc.Utf8.parse('TRYTOCN394402133'); export function secretSignature() { let params = { apply_id: settings.applyId, timestamp: new Date().getTime(), nonce_str: Math.random(), }; let array = []; for (let paramsKey in params) { array.push(paramsKey + '=' + params[paramsKey]); } &lt;!-- 应用密钥进行md5加密 --> let encodeApplySecret = CryptoJS.MD5(settings.applySecret).toString(); let paramArray = [...array]; array.push('apply_secret=' + encodeApplySecret); &lt;!-- 参数排序 --> paramArray.sort(); &lt;!-- 数组排序 --> array.sort(); &lt;!-- 数组变字符串 --> array = array.join('&amp;'); paramArray = paramArray.join('&amp;'); &lt;!-- 将排序好当参数进行HmacSHA1加密作为接口当签名 --> let signature = CryptoJS.HmacSHA1(array, encodeApplySecret); &lt;!-- 将排序好当参数和接口签名拼接上进行加密 --> let encodeData = paramArray + '&amp;sign=' + signature; &lt;!-- AES加密 --> let encryptResult = CryptoJS.AES.encrypt(encodeData, key, { iv: iv, mode: CryptoJS.mode.CBC, &lt;!-- 后台用的是pad.Pkcs5,前台对应为Pkcs7 --> padding: CryptoJS.pad.Pkcs7, }); return Base64.encode(encryptResult.ciphertext.toString()); } export function openSignature() { let signParams = { apply_id: settings.applyId, timestamp: new Date().getTime(), nonce_str: Math.random(), }; let rawArray = []; for (let key in signParams) { rawArray.push(key + '=' + signParams[key]); } let encodeApplySecret = CryptoJS.MD5(settings.applySecret).toString(); rawArray.push('apply_secret=' + encodeApplySecret); &lt;!-- 参数排序 --> rawArray.sort(); rawArray = rawArray.join('&amp;'); &lt;!-- 签名 --> signParams['sign'] = CryptoJS.HmacSHA1(rawArray, encodeApplySecret).toString(); return signParams; } export function decryption(data) { &lt;!-- Base64解密 --> let baseResult = CryptoJS.enc.Base64.parse(data); &lt;!-- Base64解密 --> let ciphertext = CryptoJS.enc.Base64.stringify(baseResult); &lt;!-- AES解密 --> let decryptResult = CryptoJS.AES.decrypt(ciphertext, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7, }); let resData = decryptResult.toString(CryptoJS.enc.Utf8).toString(); return JSON.parse(resData); } settings.js(代码如下) let autographCon = { /** * 签名模式 */ signaturePattern: 'SECRET', /** * addId * */ applyId: 'system', /** * appkey 经过编码 */ applySecret: '123456', }; export default autographCon; 完整例子import axios from 'axios'; import settings from './settings' const service = axios.create({ &lt;!-- 请求地址 --> baseURL: 'http://192.168.10.121:6911', &lt;!-- 是否应许头部携带cookie --> withCredentials: true, &lt;!-- 执行事件间隔 --> timeout: 5000 }) &lt;!-- 请求拦截 --> service.interceptors.request.use( &lt;!-- config是请求前数据 --> config => { &lt;!-- 接口签名 --> if (settings.signaturePattern) { if (settings.signaturePattern === 'OPEN') { config.params = { // 合并参数 ...config.params, ...openSignature() } } if (settings.signaturePattern === 'SECRET') { config.headers['Content'] = secretSignature() } config.headers['pattern'] = settings.signaturePattern config.headers['Content-Type'] = 'application/json;charset=UTF-8' } return config; }, error => { &lt;!-- 错误信息 --> return Promise.reject(error); }, );","link":"/2022/11/20/%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D/"},{"title":"用户代码片段","text":"vscode { /* microApp */ &quot;microAppGetData&quot;: { &quot;prefix&quot;: &quot;microAppGetData&quot;, &quot;body&quot;: [&quot;window.microApp.getData()&quot;], &quot;description&quot;: &quot;子应用获取基座应用数据&quot; }, &quot;microAppDispatch&quot;: { &quot;prefix&quot;: &quot;microAppDispatch&quot;, &quot;body&quot;: [&quot;window.microApp.dispatch({type: '子应用发送的数据'})&quot;], &quot;description&quot;: &quot;子应用向基座发送数据&quot; }, /* javascript */ &quot;includes&quot;: { &quot;prefix&quot;: &quot;includes&quot;, &quot;body&quot;: [&quot;['vertical'].includes('vertical')&quot;], &quot;description&quot;: &quot;判断是否存在返回boolean&quot; }, /* Vue2 */ &quot;computedVue2&quot;: { &quot;prefix&quot;: &quot;computedVue2&quot;, &quot;body&quot;: [ &quot; computed: {&quot;, &quot; /* 外露组件高度 */&quot;, &quot; exposureHeight: function () {&quot;, &quot; return this.$refs.exposureHeight.offsetHeight&quot;, &quot; },&quot;, &quot; },&quot; ], &quot;description&quot;: &quot;计算属性&quot; }, &quot;watchVue2&quot;: { &quot;prefix&quot;: &quot;watchVue2&quot;, &quot;body&quot;: [ &quot;watch: {&quot;, &quot; dataform: {&quot;, &quot; handler(data) {&quot;, &quot; console.log(data);&quot;, &quot; },&quot;, &quot; deep: true,&quot;, &quot; immediate: true,&quot;, &quot; },&quot;, &quot; },&quot; ], &quot;description&quot;: &quot;监听&quot; }, &quot;mixVue2&quot;: { &quot;prefix&quot;: &quot;mixVue2&quot;, &quot;body&quot;: [ &quot;/* &quot;, &quot; 混入&quot;, &quot;*/&quot;, &quot;export const graphDraw = {&quot;, &quot; methods: {&quot;, &quot; &quot;, &quot; }&quot;, &quot;}&quot; ], &quot;description&quot;: &quot;&quot; }, /* css */ &quot;line1px&quot;: { &quot;prefix&quot;: &quot;line1px&quot;, &quot;body&quot;: [ &quot;width: calc(100% - 70px);&quot;, &quot;height: 1px;&quot;, &quot;overflow: hidden;&quot;, &quot;background: rgba(126, 134, 142, 0.46);&quot; ], &quot;description&quot;: &quot;1px的线&quot; }, /* v3set */ &quot;iconfont&quot;: { &quot;prefix&quot;: &quot;iconfont&quot;, &quot;body&quot;: [&quot;&lt;i class=\\&quot;iconfont icon-sousuo1\\&quot; /&gt;&quot;, &quot;&quot;], &quot;description&quot;: &quot;iconfont图标使用&quot; }, &quot;HtSvg&quot;: { &quot;prefix&quot;: &quot;HtSvg&quot;, &quot;body&quot;: [ &quot;&lt;HtSvg&quot;, &quot; :parameter=\\&quot;{&quot;, &quot; className: '' /* class */,&quot;, &quot; iconName: 'icon-gonggongzujian_shouqi1',&quot;, &quot; color: '#cdcdcd' /* 默认颜色 */,&quot;, &quot; type: '元件收起控制',&quot;, &quot; clickAfterIconName: '' /* 点击后图标 */,&quot;, &quot; clickMomentColor: '' /* 点击后瞬间颜色 */,&quot;, &quot; clickAfterColor: '' /* 点击后图标颜色 */,&quot;, &quot; mouseHoverColor: '' /* 鼠标移入颜色 */,&quot;, &quot; width: '16px' /* 宽 */,&quot;, &quot; height: '16px' /* 高 */&quot;, &quot; }\\&quot;&quot;, &quot; @svgIconEvent=\\&quot;operateEvent\\&quot;&quot;, &quot;/&gt;&quot; ], &quot;description&quot;: &quot;HtSvg&quot; }, &quot;v3setWatch&quot;: { &quot;prefix&quot;: &quot;v3setWatch&quot;, &quot;body&quot;: [ &quot;watch(&quot;, &quot; () =&gt; listA.value,&quot;, &quot; () =&gt; {&quot;, &quot; console.log(listA);&quot;, &quot; },&quot;, &quot; { deep: true, immediate: true }&quot;, &quot;);&quot; ], &quot;description&quot;: &quot;监听&quot; }, &quot;v3setOnBeforeRouteLeave&quot;: { &quot;prefix&quot;: &quot;v3setOnBeforeRouteLeave&quot;, &quot;body&quot;: [ &quot;import { onBeforeRouteLeave } from \\&quot;vue-router\\&quot;;&quot;, &quot;onBeforeRouteLeave((to, from) =&gt; {&quot;, &quot; console.log(to, from);&quot;, &quot;});&quot; ], &quot;description&quot;: &quot;局部路由守卫&quot; }, &quot;v3setDefineOptions&quot;: { &quot;prefix&quot;: &quot;v3setDefineOptions&quot;, &quot;body&quot;: [&quot;defineOptions({&quot;, &quot; name: 'svg-icon'&quot;, &quot;})&quot;], &quot;description&quot;: &quot;vue3中的name创建&quot; }, &quot;v3setDefineEmits&quot;: { &quot;prefix&quot;: &quot;v3setDefineEmits&quot;, &quot;body&quot;: [&quot;const emit = defineEmits(['svgIconEvent'])&quot;], &quot;description&quot;: &quot;emit使用&quot; }, &quot;v3setDefineProps&quot;: { &quot;prefix&quot;: &quot;v3setDefineProps&quot;, &quot;body&quot;: [ &quot;const props = defineProps({&quot;, &quot; iconClass: { type: String, default: '' },&quot;, &quot; title: { type: String, default: '' } /* 提示展示 */,&quot;, &quot; parameter: { type: Object, default: () =&gt; {} }&quot;, &quot;})&quot; ], &quot;description&quot;: &quot;props接受&quot; }, &quot;v3setImportVue&quot;: { &quot;prefix&quot;: &quot;v3setImportVue&quot;, &quot;body&quot;: [ &quot;import {&quot;, &quot; ref,&quot;, &quot; reactive,&quot;, &quot; watch,&quot;, &quot; computed,&quot;, &quot; nextTick,&quot;, &quot; onBeforeMount,&quot;, &quot; onMounted,&quot;, &quot; onBeforeUpdate,&quot;, &quot; onUpdated,&quot;, &quot; onBeforeUnmount,&quot;, &quot; onUnmounted,&quot;, &quot; onErrorCaptured&quot;, &quot;} from 'vue'&quot; ], &quot;description&quot;: &quot;v3setImportVue&quot; }, /*pinia */ &quot;piniaStoreToRefs&quot;: { &quot;prefix&quot;: &quot;piniaStoreToRefs&quot;, &quot;body&quot;: [ &quot;import { appControllerStore } from \\&quot;@/store/modules/appController\\&quot;;&quot;, &quot;import { storeToRefs } from \\&quot;pinia\\&quot;;&quot;, &quot;const { chooseList } = storeToRefs(appControllerStore());&quot; ], &quot;description&quot;: &quot;使用piniaStoreToRefs&quot; } }","link":"/2022/08/01/%E7%94%A8%E6%88%B7%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"},{"title":"移动端vue＋cordova项目","text":"cordova打包环境配置 下载软件 android-studio-2020.3.1.24-window下载地址 https://developer.android.com/ 软件安装 在D盘新建目录Android， 在建两个之文件夹Android Studioh和Sdk android-studio-2020.3.1.24-windows安装在Android Studioh Sdk文件用来装安卓sdk（安卓sdk在android-studio-2020.3.1.24-window软件里下载） 安卓环境配置 安卓环境 Java gradl环境 环境配置 ANDROID_HOME D:\\Android\\Sdk %ANDROID_HOME%\\tools %ANDROID_HOME%\\platform-tools 2.Java解压到C:\\Program Files\\ GRADLE_HOME C:\\Program Files\\Java\\gradle-6.8 JAVA_HOME C:\\Program Files\\Java\\JDK1.8u74_x64 %GRADLE_HOME%\\bin %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 检查安装环境是否配置成功 cordova requirements cordova项目(用于打包apk) 创建cordova项目命令 // npm install -g cordova@10.0.0 先安装cordova cordova create ToastDemo com.msh.toast &lt;!-- ToastDemo： 工程名 com.msh.toast：包名 生成的cordova文件中 *config.xml -包含应用相关信息，使用到的插件以及面向的平台 platforms – 包含应用运行平台如 Android 和 iOS 上对应的 Cordova 库 plugins – 包含应用所需插件的 Cordova 库，使得应用能够访问例如照相机和电池状态相关的事项。 www – 包含应用源代码，例如 HTML, JavaScript 和 CSS 文件 hooks – 包含为个性化应用编译系统所需的脚本* --&gt; cordova platform add android // 来生成Android平台的cordova库 cordova run android // 打包项目成apk vue使用cordova插件时需要在vue中的public下index.html中引入依赖 &lt;!-- 非cordova打包时，需将下一行代码删掉, 使用cordova打包时，需将下一行代码取消注释 --&gt; &lt;script src=&quot;./cordova.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; vue项目 px自动转换rem 安装两个插件(安装在devDependencies) npm install postcss-pxtorem -save-dev npm install amfe-flexible -save-dev 新建文件 postcss.config.js添加如下代码(项目根文件下) const autoprefixer = require('autoprefixer') const pxtorem = require('postcss-pxtorem') module.exports = { plugins: [ autoprefixer(), pxtorem({ rootValue: 37.5, // 37.5为app, iapd为13.5 unitPrecision: 10, // 最小精度，小数点位数 propList: ['*'], // 匹配属性 *代表所有 minPixelValue: 1, // 计算的最小像素值1px }), ], } 自动切换配置 // APP打包配置，不配会出现白屏 if (process.env.NODE_ENV == &quot;production&quot;) { document.addEventListener( &quot;deviceready&quot;, function () { window.Vue = new Vue({ router, render: h =&gt; h(App) }).$mount(&quot;#app&quot;); }, false ); } else { new Vue({ router, render: (h) =&gt; h(App), }).$mount('#app') } cordova与vue结合需要在main.js如下代码 if (process.env.NODE_ENV == &quot;production&quot;) { // 判断手机类型 if (navigator.userAgent.match(/(pad|pod|iPod|ios|iPad|Android|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)) { // 使用cordova打包时要使用以下方式↓ document.addEventListener( &quot;deviceready&quot;, function () { window.Vue = new Vue({ router, render: h =&gt; h(App) }).$mount(&quot;#app&quot;); }, false ); // ↑ } else { // 为部署webApp时使用 new Vue({ router, render: (h) =&gt; h(App), }).$mount('#app') } } else { // 开发环境 new Vue({ router, render: (h) =&gt; h(App), }).$mount('#app') } 扫码功能 在 cordova项目安装扫码插件(命令如下) cordova plugin add phonegap-plugin-barcodescanner 方法调用 // vue中的事件 scanCodesEvent() { cordova.plugins.barcodeScanner.scan( function (result) { if (!result.cancelled) { if (result.format == \"QR_CODE\") { // 扫码后的值 console.log(result.text) } else { console.log('Sorry, only qr codes this time') } } else { console.log('The user has dismissed the scan') } }, function (error) { console.log(error) } ); } app自动更新 在cordova更目录下载插件命令如下 cordova plugin add cordova-plugin-app-update --save 在Vue项目文件夹public中的index.html添加如下代码 &lt;script src=&quot;./cordova.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; vue中代码 created() { this.setCheckUpdate(); // 自动更新 } methods: { setCheckUpdate() { if (process.env.NODE_ENV == &quot;production&quot;) { this.checkUpdate(); clearInterval(this.checkTimer); this.checkTimer = setInterval(() =&gt; { this.checkUpdate(); }, 180000); } }, // 自动更新 checkUpdate() { // var updateUrl = &quot;http://192.168.28.194:8022&quot;; let updateUrl = window.localStorage.getItem(&quot;appUpdate&quot;); // alert(updateUrl); // alert(updateUrl + &quot;/public/app/version.xml&quot;); // alert(updateUrl + &quot;/public/app/app-release.apk&quot;); window.AppUpdate.checkAppUpdate( function () { //alert(&quot;success&quot;); }, function () { //alert(&quot;fail&quot;); }, updateUrl + &quot;/public/app/version.xml&quot;, // 服务器对比版本文件放在服务器上version.xml { downloadUrl: updateUrl + &quot;/public/app/app-release.apk&quot; } // 服务器能下载的apk路径地址 ); }, }, 小米推插件 创建Cordova项目，其中cordova包名要和小米开发平台包名一致 在cordova中添加插件 添加插件cordova plugin add cordova-plugin-mipush --variable MI_PUSH_APP_KEY=5462004080642 --variable MI_PUSH_APP_ID=2882303761520040642 --variable MI_PUSH_APP_IOS_ID=your_mipush_appid --variable MI_PUSH_APP_IOS_KEY=your_mipush_appkey（MI_PUSH_APP_KEY为你的小米推送的key，MI_PUSH_APP_ID为你的小米推送的ID） 添加插件cordova-plugin-x-toast 在Vue项目文件夹public中的index.html 添加如下代码 的时候可能导致页面样式改变，如果改变则不加，否则还是建议加上。这段主要是防止跨站脚本攻击。 &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;&quot;&gt; &lt;!-- 非cordova打包时，需将下一行代码删掉, 使用cordova打包时，需将下一行代码取消注释 --&gt; &lt;script src=&quot;./cordova.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;!-- 小米推送消息悬浮窗 --&gt; &lt;script src=&quot;Toast.js&quot; type=&quot;text/javascript&quot; &gt;&lt;/script&gt; mian.js中添加 document.addEventListener( &quot;deviceready&quot;, function () { window.Vue = new Vue({ router, render: h =&gt; h(App) }).$mount(&quot;#app&quot;); }, false ); vue中使用 import pushServer from &quot;@/plugins/millet/pushServer.js&quot;; // 小米推送引入 data() { return { pushServer: pushServer, // 小米推送 }; }, created() { this.milletPush(); } methods: { milletPush() { this.pushServer.initialize(); this.pushServer.that = this; } } // 最后注册登录人别名注册 this.pushServer.setAlias(this.loginData.username); //小米推送注册别名 pushServer.js文件代码 var app = { regId: &quot;&quot;, that: &quot;&quot;, initialize: function () { this.bindEvents(); }, setAlias(alias) { try { window.plugins.MiPushPlugin.setAlias(alias); console.log(&quot;设置别名&quot;, alias); } catch (e) {} }, unSetAlias(alias) { try { window.plugins.MiPushPlugin.unSetAlias(alias); console.log(&quot;移除别名&quot;, alias); } catch (e) {} }, bindEvents: function () { document.addEventListener(&quot;deviceready&quot;, this.onDeviceReady, false); document.addEventListener( &quot;mipush.notificationMessageArrived&quot;, this.onNotificationMessageArrived, false ); document.addEventListener( &quot;mipush.notificationMessageClicked&quot;, this.onNotificationMessageClicked, false ); document.addEventListener( &quot;mipush.receiveRegisterResult&quot;, this.onReceiveRegisterResult, false ); }, onDeviceReady: function () { console.log(&quot;onDeviceReady:---------------&quot;); app.initiateUI(); }, initiateUI: function () { try { console.log(&quot;initiateUI&quot;); window.plugins.MiPushPlugin.init(); } catch (exception) { console.log(&quot;initiateUI-----exception:&quot; + exception); } }, onNotificationMessageClicked: function (data) { console.log(&quot;onNotificationMessageClickedonNotificationMessage&quot;); try { var title = data.title; var description = data.description; console.log( &quot;onNotificationMessageClicked---------&quot; + &quot;-title-&quot; + title + &quot;-description-&quot; + description ); console.log( &quot;onNotificationMessageClickeddata&quot; + data.extra.path + &quot; &quot; + JSON.stringify(data) ); app.that.$router.push(data.extra.path); } catch (exception) { console.log(&quot;onNotificationMessageClicked------exception:&quot; + exception); } }, showToast(message) { console.log(&quot;showToastshowToastshowToastshowToast&quot;, message); window.plugins.toast.showWithOptions({ message: message, duration: &quot;2000&quot;, // which is 2000 ms. &quot;long&quot; is 4000. Or specify the nr of ms yourself. position: &quot;top&quot;, addPixelsY: 0 // added a negative value to move it up a bit (default 0) }, function (args) { console.log(&quot;toast args: &quot;, args.event); //This will print 'hide' }, function (error) { console.error(&quot;toast error: &quot;, error); } ); }, onNotificationMessageArrived: function (data) { try { var title = data.title; var description = data.description; console.log(&quot;app.showToast&quot;, data); app.showToast(title); console.log( &quot;onNotificationMessageArrived---------&quot; + &quot;-title-&quot; + title + &quot;-description-&quot; + description ); console.log( &quot;onNotificationMessageArriveddata---------&quot; + JSON.stringify(data) ); } catch (exception) { console.log(&quot;onNotificationMessageArrived------exception:&quot; + exception); } }, onReceiveRegisterResult: function (data) { try { console.log(&quot;onReceiveRegisterResult---------&quot; + data.regId); app.regId = data.regId; } catch (exception) { console.log(&quot;onReceiveRegisterResult------exception:&quot; + exception); } } }; export default app; // app.initialize(); 拍照功能 安装插件 cordova plugin add cordova-plugin-camera vue代码 @click=&quot;cameraTakePicture&quot; methods: { cameraTakePicture() { let self = this; navigator.camera.getPicture(onSuccess, onFail, { quality: 50, destinationType: Camera.DestinationType.DATA_URL, }); function onSuccess(imageData) { let src = &quot;data:image/jpeg;base64,&quot; + imageData; console.log(src); } function onFail(message) { alert(&quot;Failed because: &quot; + message); } }, } cordova常用命令 查看所安装的插件 cordova plugin ls 安装插件 cordova plugin add 名字 // 安装官网的插件 cordova plugin add ./目录 // 安装自定义 卸载com.evget.qrcodescan插件 cordova plugin remove com.evget.qrcodescan cordova自定义插件 创建插件 plugman create --name toast_plugin --plugin_id cordova-plugin-toastdemo --plugin_version 1.0.0 –name toast_plugin --&gt; 插件名 (注意起名，不要和原生方法冲突) –plugin_id cordova-plugin-toastdemo --&gt; 插件Id –plugin_version 1.0.0 --&gt; 插件版本号 cordova小细节 在platforms/android/app/src/main/AndroidManifest.xml中标签application需要添加android:usesCleartextTraffic=”true”因为最新cordova加了加密https协议，不然访问不了请求 &lt;application android:usesCleartextTraffic=&quot;true&quot;&gt; 基本配置 &lt;?xml version='1.0' encoding='utf-8'?&gt; &lt;widget id=&quot;org.apache.cordova.myApp&quot; version=&quot;1.0.0&quot; xmlns=&quot;http://www.w3.org/ns/widgets&quot; xmlns:cdv=&quot;http://cordova.apache.org/ns/1.0&quot;&gt; &lt;name&gt;渝辉MES-生产执行&lt;/name&gt; &lt;description&gt; A sample Apache Cordova application that responds to the deviceready event. &lt;/description&gt; &lt;author email=&quot;dev@cordova.apache.org&quot; href=&quot;http://cordova.io&quot;&gt; Apache Cordova Team &lt;/author&gt; &lt;content src=&quot;index.html&quot; /&gt; &lt;access origin=&quot;*&quot; /&gt; &lt;!-- 浏览器连接可打开配置 --&gt; &lt;allow-navigation href=&quot;http://*/*&quot; /&gt; &lt;allow-navigation href=&quot;https://*/*&quot; /&gt; &lt;!-- 系统内部连接可打开配置 --&gt; &lt;allow-intent href=&quot;http://*/*&quot; /&gt; &lt;allow-intent href=&quot;https://*/*&quot; /&gt; &lt;allow-intent href=&quot;tel:*&quot; /&gt; &lt;allow-intent href=&quot;sms:*&quot; /&gt; &lt;allow-intent href=&quot;mailto:*&quot; /&gt; &lt;allow-intent href=&quot;geo:*&quot; /&gt; &lt;!-- 禁止手机app横竖屏幕转换 default 默认转屏, landscape横向, portrait 纵向 --&gt; &lt;preference name=&quot;orientation&quot; value=&quot;landscape&quot; /&gt; &lt;platform name=&quot;android&quot;&gt; &lt;allow-intent href=&quot;market:*&quot; /&gt; &lt;!-- 移动app图标设置 --&gt; &lt;icon density=&quot;ldpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;icon density=&quot;mdpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;icon density=&quot;hdpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;icon density=&quot;xhdpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;icon density=&quot;xxhdpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;icon density=&quot;xxxhdpi&quot; src=&quot;icon/android/logo.png&quot; /&gt; &lt;/platform&gt; &lt;platform name=&quot;ios&quot;&gt; &lt;allow-intent href=&quot;itms:*&quot; /&gt; &lt;allow-intent href=&quot;itms-apps:*&quot; /&gt; &lt;/platform&gt; &lt;/widget&gt;","link":"/2020/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AFvue%EF%BC%8Bcordova%E9%A1%B9%E7%9B%AE/"},{"title":"装修细节要求和疑问","text":"装修疑问 厕所门是否是全包门? 墙面空鼓度是百分之好多? 地砖空鼓度是百分之好多? 瓷砖美缝用的什么材料? 厨房门想通铺进入后，厨房门安装不稳，轨道需要焊接到瓷砖里会不会破，不好焊接? 原来厕所外面已经有水和霉了，刷防水前需要做处理吗? 厨房有无二次排水? 柜子加抽屉需要加钱吗，还有造型需要加钱吗?需要加钱的分别是好多? 厕所回填是什么? 橱柜会不会超过面积加费用? 主卧空调移动位置需要收费吗?还有空调排水需要另外加钱吗? 厨房的灯具包含吗? 包燃气的改造吗? 开荒保洁做到那种程度? 工期检查几天一次? 水电气工程质保多久? 厕所和厨房防水质保多久? 地砖墙砖质保多久? 整个工程质保多久? 细节要求 最后一次要压钱，等三年或者一定期间 厕所要用陶粒填充 橱柜必须做满 墙砖不能用泡水砖，必须用瓷砖胶＋拉毛＋背胶(瓷砖胶代替河沙水利) 墙砖和地砖不要有脱墨剂 地面贴砖空鼓度0%(所有不空鼓) 墙砖空鼓度3%(每一百块有3快算合格) 完成一个工程付一笔钱:开工前付当前工序的百分之40%，结束验收付剩下的60%。进入下一工序继续付款当前工序的百分之40，以此类推。 不能违规施工，导致社区检查，出现的物品损坏和罚款金额,全部由公司承担和负责 施工过程中造成的他人财产物品损失，公司负责 墙面(墙纸)拆除后，刷乳胶漆前必须做一次界面剂处理(请详细查看涂刷乳胶漆标准流程工序) 瓷砖美缝品牌德高 厕所和厨房吊顶距离地板要标准的2.4米高 厨房的门和卧室的门要有助力器 瓷砖必须要优等品，并且是生产必须是广东福山 每个瓷砖缝隙留2毫米，好打美缝剂 贴砖10厘米以内的小块不要 大门地砖竖线不对门。其它房间可以 厨房的进水设计一下预留过滤器 洗衣机和冰箱要完全推得进去：比如排水和插座位置 电视墙的线在墙里 厕所和厨房墙壁要对缝 踢脚线做暗的 如果地脚线是客厅瓷砖，必须对缝 每个房间的网线口网线水晶头必须接好 厕所和厨房电不要走地(水电走天)，客厅和卧室水电都走地 瓷砖损耗公司负责，不得找业主加钱 三个房间门的门套，还有大门的门套 这三个必须有 灯具业主买来(有主灯)，公司免费安装。不得收取费用 厨房的洗菜盆使用台中盆 厨房和厕所必须有地漏 施工时必须有成品保护，刷乳胶漆时。 刷防水:厕所满刷厨房刷50公分 厕所必须要有二次排水 电线不能是同包铝 三个房间的柜子尺寸必须算正确包含榻榻米部分，并且把价格包含在总价里面 乳胶漆工序:满屋挂网 厕所防水:厕所用的柔性防水，墙要用钢性防水 帖地板砖瓷砖必须刷水利浆 新墙必须用红砖 承诺的工期延期后，每超过一天按照违约金100元每天 在水电气开工前确定点位时插座面板 全屋五金(厨房,卫生)，必须是不锈钢(包含角阀等等)不限点位 厨房的洗菜盆公司提供 厨房和厕所的铝扣板公司提供 三个卧室的门还有厨房门，包五金和安装 包拆除和出渣(包含前中后到开荒保洁整个过程)一票包制度 主卧的飘窗拆除，新建墙以及地砖铺设 厨房的传统洗台拆除和新建墙1米高＋窗户 客厅的弧形门洞 入户门前的吊顶 客厅三个卧室不吊顶走石膏线 拆除后补烂包含厕所，卧室，厨房，客厅 打线槽开竖并且必须包安装 开关面板，五金，都是公司提供 按照设计图出现的改墙改主管道，不收取任何费用 厨房和厕所的水管公司提供不收取任何费用 厕所洗漱盆，排水都在墙里面，改水管方向的不收取任何费用 必须有开荒保洁 窗帘盒必须包含 偷工减料，以次充好假一赔十 工期检查3天一次 设计方案不变:增项不得超过百分之1 移门助力器：厨房用气压感应型，卧室用机械缓冲型","link":"/2025/07/31/%E8%A3%85%E4%BF%AE%E7%BB%86%E8%8A%82%E8%A6%81%E6%B1%82%E5%92%8C%E7%96%91%E9%97%AE/"},{"title":"git配置与安装及常用命令","text":"git-ssh配置git config --global user.name &quot;zhangjie&quot; git config --global user.email &quot;2811932734@qq.com&quot; ssh-keygen -t rsa -C &quot;2811932734@qq.com&quot; 常用命令git branch 查看当前分支 git branch -r 查看远程分 git branch -a 查看本地分支和远程分支 git checkout feature/zhangjie 切换分支（feature/zhangjie） git branch --set-upstream-to=origin/zj zj 本地分支和远程建立联系 git branch -D 分支名 删除本地分支 合并分支 将sp2上修改的内容合并到sp3上 git checkout sP3 //先切换到目标分支上 git merge SP2 //执行合并操作 无冲突执行提交 git push","link":"/2020/12/26/%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AE%89%E8%A3%85/"},{"title":"宝典","text":"Canvas （画布）Canvas 是 HTML5 中新出的一个元素，开发者可以在上面绘制一系列图形 css的盒子模型描述：常见的内容(content),内边距(padding),外边距(margin),边框(border),css都具备这些属性，而这些属性在我们日常生活中遇见的事物比如盒子作一个比较来理解所以叫它css盒子模型 html5应用程序缓存和浏览器缓存的区别水平垂直居中 利用定位＋margin &lt;!-- 父级div --&gt; position:relative; height:200px; width:200px; &lt;!-- 子级div --&gt; position:absolute; top:0; bottom:0; left:0; right:0; margin:auto; width:100px; height:100px; 定位＋transform &lt;!-- 父级div --&gt; position:relative; width:200px; heigth:200px; &lt;!-- 子级div --&gt; position:absolute; top:50%; left:50%; transform:translate(-50%,50%); width:100px; heigth:100px; 使用flex &lt;!-- 父级div --&gt; display:flex; justify-content:center; align-items:center; width:200px; height:200px; &lt;!-- 子级div --&gt; width:100px; height:100px' 利用grid &lt;!-- 父级div --&gt; display: grid; justify-content: center; align-items: center; width: 200px; height: 200px; &lt;!-- 子级div --&gt; width: 100px; height: 100px; ajax的工作原理是通过XmlHttpRequest的对象来向服务器发起异步请求，从服务器中获得数据，然后用Javascript来操作DOM从而更新局部页面 浏览器内多标签页怎么通讯 使用websocket协议,可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。 使用ShareWorker的方式，shareworker会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就是充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。 使用localStorage，我们可以在一个标签页对locaStorage的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。 使用postMessage方法，如果我们能获得对应标签的引用，就可以使用postMessage方法进行通讯。 不使用border画出1px的线 div &lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt; hr &lt;hr size=&quot;1&quot;&gt; css3有哪些新特性use strict 是什么，使用它区别 变量必须声明后再使用 在使用默认参数的函数中的参数不能有同名属性，否则报错，在同一作用域中不能有同名参数 增加了保留字（比如protected、static和interface） 禁止this指向全局对象 不能对只读属性赋值，否则报错 不能使用前缀0表示八进制数，否则报错（用0O表示） 不能删除不可删除的属性，否则报错 不能使用with语句(with语句接收的对象会添加到作用域链的前端并在代码执行完之后移除)（ with(obj) ） eval不会在它的外层作用域引入变量 ( eval(str) ) eval和arguments不能被重新赋值 arguments不会自动反映函数参数的变化 不能使用arguments.callee 不能使用arguments.caller 不能使用fn.caller和fn.arguments获取函数调用的堆栈 不能删除变量delete prop，会报错，只能删除属性delete global[prop] htm5有哪些新特新除了哪些元素新特性： a. HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加 b. 拖拽释放(Drag and drop) API c. 语义化更好的内容标签（header,nav,footer,aside,article,section） d. 音频、视频API(audio,video) e. 画布(Canvas) API f. 地理(Geolocation) API g. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失 h. sessionStorage 的数据在页面会话结束时会被清除 i. 表单控件，calendar、date、time、email、url、search j. 新的技术webworker, websocket等 移除的元素： k. 纯表现的元素：basefont，big，center, s，strike，tt，u l. 对可用性产生负面影响的元素：frame，frameset，noframes 如何处理html5新标签在浏览器兼容性问题如何处理区分html和html5vue双向绑定的原理来谈一谈你对vue项目做了哪些优化生拷贝和浅拷贝的区别Cookie、sessionStorage、localStorage的区别data中可以返回对象吗绘制和重排有了解吗数组有哪些方法es6中let，const,var的区别es6箭头函数和普通函数的区别vue2和vue3的区别数组排序有哪些方法如下那种前端构建技术可以剔除javascripc中没有被使用的代码code Splitting可以将代码分成多个捆绑包，然后可以按需或并行加载；source Mapping是从已转换的代码映射到原始源的文件，使浏览器能够重构原始源并在调试器中重建的原始源 怎么解决回调地狱使用async await可以解决 timer(){ return new Promise((resolve,reject)=>{ }) } async inittime(){ await this.timer() } js中数组里面的相同的元素如何去重 这个数组里面的数据类型一致吗 对象一致判定的原则是什么，数组一致判定的标准是什么 vuex中的数据在页面刷新以后消失怎么办自己手动保存在localStorage或sessionStorage或者直接使用社区的vuew-persist或者vuex-persistedstate vue中keep-alive的作用keep-alive用来缓存组件，避免多次加载相应的组件减少性能消耗简单来说使用了keep-alive的页面，第二次进入的时候只会渲染第一次渲染好的页面数据，除非刷新页面才渲染新数据才执行created等钩子函数否则只能用activated和deactived这两个生命钩子来得知当前组件是否处于活动状态","link":"/2022/07/07/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"DevExtreme","slug":"DevExtreme","link":"/tags/DevExtreme/"},{"name":"封装","slug":"封装","link":"/tags/%E5%B0%81%E8%A3%85/"},{"name":"装修","slug":"装修","link":"/tags/%E8%A3%85%E4%BF%AE/"},{"name":"案例","slug":"案例","link":"/tags/%E6%A1%88%E4%BE%8B/"}],"categories":[{"name":"DevExtreme","slug":"DevExtreme","link":"/categories/DevExtreme/"},{"name":"js","slug":"js","link":"/categories/js/"},{"name":"OpenLayers","slug":"OpenLayers","link":"/categories/OpenLayers/"},{"name":"笔记学习","slug":"笔记学习","link":"/categories/%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0/"},{"name":"功能模块","slug":"功能模块","link":"/categories/%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"创建工程项目","slug":"创建工程项目","link":"/categories/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE/"},{"name":"iframe通讯","slug":"iframe通讯","link":"/categories/iframe%E9%80%9A%E8%AE%AF/"},{"name":"java＋springBoot","slug":"java＋springBoot","link":"/categories/java%EF%BC%8BspringBoot/"},{"name":"jq","slug":"jq","link":"/categories/jq/"},{"name":"markdown","slug":"markdown","link":"/categories/markdown/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"},{"name":"npm","slug":"npm","link":"/categories/npm/"},{"name":"nvm","slug":"nvm","link":"/categories/nvm/"},{"name":"支付回调","slug":"支付回调","link":"/categories/%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"插件","slug":"插件","link":"/categories/%E6%8F%92%E4%BB%B6/"},{"name":"vscode","slug":"vscode","link":"/categories/vscode/"},{"name":"vite","slug":"vite","link":"/categories/vite/"},{"name":"config","slug":"config","link":"/categories/config/"},{"name":"打包优化","slug":"打包优化","link":"/categories/%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"},{"name":"装修","slug":"装修","link":"/categories/%E8%A3%85%E4%BF%AE/"},{"name":"公司","slug":"公司","link":"/categories/%E5%85%AC%E5%8F%B8/"},{"name":"ui","slug":"ui","link":"/categories/ui/"},{"name":"micro","slug":"micro","link":"/categories/micro/"},{"name":"It问题归纳","slug":"It问题归纳","link":"/categories/It%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"},{"name":"axios","slug":"axios","link":"/categories/axios/"},{"name":"git","slug":"git","link":"/categories/git/"}],"pages":[{"title":"分类","text":"","link":"/categories/index.html"},{"title":"关于","text":"活到老学到老","link":"/about/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}]}